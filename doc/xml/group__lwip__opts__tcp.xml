<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group__lwip__opts__tcp" kind="group">
    <compoundname>lwip_opts_tcp</compoundname>
    <title>TCP</title>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__lwip__opts__tcp_1ga2ca03bfa6f604ba536e38ccfdbdf9c8d" prot="public" static="no">
        <name>LWIP_CALLBACK_API</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1269" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1ga39f76e811117155be8525bb386ecddb7" prot="public" static="no">
        <name>LWIP_EVENT_API</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LWIP_EVENT_API and LWIP_CALLBACK_API: Only one of these should be set to 1. LWIP_EVENT_API==1: The user defines lwip_tcp_event() to receive all events (accept, sent, etc) that happen in the system. LWIP_CALLBACK_API==1: The PCB callback function is called directly for the event. This is the default. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1268" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1gaa4ed98deb97b77c633cb8870f34c71e9" prot="public" static="no">
        <name>LWIP_TCP</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LWIP_TCP==1: Turn on TCP. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1092" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1092" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1ga249bc450bb818cf2ef3cf1472ff354fd" prot="public" static="no">
        <name>LWIP_TCP_TIMESTAMPS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LWIP_TCP_TIMESTAMPS==1: support the TCP timestamp option. The timestamp option is currently only used to help remote hosts, it is not really used locally. Therefore, it is only enabled when a TS option is received in the initial SYN packet from a remote host. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1249" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1ga88dbbfeeeb41b129fdc8235fc08bb530" prot="public" static="no">
        <name>LWIP_WND_SCALE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LWIP_WND_SCALE and TCP_RCV_SCALE: Set LWIP_WND_SCALE to 1 to enable window scaling. Set TCP_RCV_SCALE to the desired scaling factor (shift count in the range of [0..14]). When LWIP_WND_SCALE is enabled but TCP_RCV_SCALE is 0, we can use a large send window while having a small receive window only. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1288" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1gac04b84d32251ac558f0c3a8af85ba3a5" prot="public" static="no">
        <name>TCP_CALCULATE_EFF_SEND_MSS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TCP_CALCULATE_EFF_SEND_MSS: "The maximum size of a segment that TCP really sends, the &apos;effective send MSS,&apos; MUST be the smaller of the send MSS (which reflects the available reassembly buffer size at the remote host) and the largest size permitted by the IP layer" (RFC 1122) Setting this to 1 enables code that checks TCP_MSS against the MTU of the netif used for a connection and limits the MSS if it would be too big otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1155" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1ga93cce3f47e33df11248c908d1775bacf" prot="public" static="no">
        <name>TCP_DEFAULT_LISTEN_BACKLOG</name>
        <initializer>0xff</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum allowed backlog for TCP listen netconns. This backlog is used unless another is explicitly specified. 0xff is the maximum (u8_t). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1221" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1ga98b23e7cbd3281915c50a485cb61899d" prot="public" static="no">
        <name>TCP_LISTEN_BACKLOG</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TCP_LISTEN_BACKLOG: Enable the backlog option for tcp listen pcb. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1212" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1ga0dee0911197855bdf19ef79778c241a6" prot="public" static="no">
        <name>TCP_MAXRTX</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TCP_MAXRTX: Maximum number of retransmissions of data segments. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1117" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1gaf1ab7bb27860aa3677c387a2f3ba317b" prot="public" static="no">
        <name>TCP_MSS</name>
        <initializer>536</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TCP_MSS: TCP Maximum segment size. (default is 536, a conservative default, you might want to increase this.) For the receive side, this MSS is advertised to the remote side when opening a connection. For the transmit size, this MSS sets an upper limit on the MSS advertised by the remote host. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1143" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1ga9d6d3219bb5fc0bc760a64114de13c25" prot="public" static="no">
        <name>TCP_OOSEQ_MAX_BYTES</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TCP_OOSEQ_MAX_BYTES: The maximum number of bytes queued on ooseq per pcb. Default is 0 (no limit). Only valid for TCP_QUEUE_OOSEQ==1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1197" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1ga1f57d3859c4556f785708e5dc440617e" prot="public" static="no">
        <name>TCP_OOSEQ_MAX_PBUFS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TCP_OOSEQ_MAX_PBUFS: The maximum number of pbufs queued on ooseq per pcb. Default is 0 (no limit). Only valid for TCP_QUEUE_OOSEQ==1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1205" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1ga5648e2580bb55c0efdfbebcf3bad1eef" prot="public" static="no">
        <name>TCP_OVERSIZE</name>
        <initializer><ref refid="group__lwip__opts__tcp_1gaf1ab7bb27860aa3677c387a2f3ba317b" kindref="member">TCP_MSS</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TCP_OVERSIZE: The maximum number of bytes that tcp_write may allocate ahead of time in an attempt to create shorter pbuf chains for transmission. The meaningful range is 0 to TCP_MSS. Some suggested values are:</para>
<para>0: Disable oversized allocation. Each tcp_write() allocates a new pbuf (old behaviour). 1: Allocate size-aligned pbufs with minimal excess. Use this if your scatter-gather DMA requires aligned fragments. 128: Limit the pbuf/memory overhead to 20%. TCP_MSS: Try to create unfragmented TCP packets. TCP_MSS/4: Try to create 4 fragments or less per TCP packet. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1239" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1ga89ffd0d7d1529bdb26bfbad267d0ad75" prot="public" static="no">
        <name>TCP_QUEUE_OOSEQ</name>
        <initializer>(<ref refid="group__lwip__opts__tcp_1gaa4ed98deb97b77c633cb8870f34c71e9" kindref="member">LWIP_TCP</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TCP_QUEUE_OOSEQ==1: TCP will queue segments that arrive out of order. Define to 0 if your device is low on memory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1132" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1ga768765a2c678fefeca6c89aae0cf629f" prot="public" static="no">
        <name>TCP_RCV_SCALE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1289" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1ga871d111968d8c6c7880ff36b93c5c4dd" prot="public" static="no">
        <name>TCP_SND_BUF</name>
        <initializer>(2 * <ref refid="group__lwip__opts__tcp_1gaf1ab7bb27860aa3677c387a2f3ba317b" kindref="member">TCP_MSS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TCP_SND_BUF: TCP sender buffer space (bytes). To achieve good performance, this should be at least 2 * TCP_MSS. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1163" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1ga9beaa47832ead4180981bfbf71074904" prot="public" static="no">
        <name>TCP_SND_QUEUELEN</name>
        <initializer>((4 * (<ref refid="group__lwip__opts__tcp_1ga871d111968d8c6c7880ff36b93c5c4dd" kindref="member">TCP_SND_BUF</ref>) + (<ref refid="group__lwip__opts__tcp_1gaf1ab7bb27860aa3677c387a2f3ba317b" kindref="member">TCP_MSS</ref> - 1))/(<ref refid="group__lwip__opts__tcp_1gaf1ab7bb27860aa3677c387a2f3ba317b" kindref="member">TCP_MSS</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TCP_SND_QUEUELEN: TCP sender buffer space (pbufs). This must be at least as much as (2 * TCP_SND_BUF/TCP_MSS) for things to work. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1171" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1gae5c9866d7cd463ac7b36792182145aec" prot="public" static="no">
        <name>TCP_SNDLOWAT</name>
        <initializer><ref refid="def_8h_1a748f5df614a3fc989e8900fd229d6e4e" kindref="member">LWIP_MIN</ref>(<ref refid="def_8h_1a21ea174d374106caeafb4aa3a24fbd2b" kindref="member">LWIP_MAX</ref>(((<ref refid="group__lwip__opts__tcp_1ga871d111968d8c6c7880ff36b93c5c4dd" kindref="member">TCP_SND_BUF</ref>)/2), (2 * <ref refid="group__lwip__opts__tcp_1gaf1ab7bb27860aa3677c387a2f3ba317b" kindref="member">TCP_MSS</ref>) + 1), (<ref refid="group__lwip__opts__tcp_1ga871d111968d8c6c7880ff36b93c5c4dd" kindref="member">TCP_SND_BUF</ref>) - 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TCP_SNDLOWAT: TCP writable space (bytes). This must be less than TCP_SND_BUF. It is the amount of space which must be available in the TCP snd_buf for select to return writable (combined with TCP_SNDQUEUELOWAT). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1180" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1ga75659867592a6b01c198532ed1b65698" prot="public" static="no">
        <name>TCP_SNDQUEUELOWAT</name>
        <initializer><ref refid="def_8h_1a21ea174d374106caeafb4aa3a24fbd2b" kindref="member">LWIP_MAX</ref>(((<ref refid="group__lwip__opts__tcp_1ga9beaa47832ead4180981bfbf71074904" kindref="member">TCP_SND_QUEUELEN</ref>)/2), 5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TCP_SNDQUEUELOWAT: TCP writable bufs (pbuf count). This must be less than TCP_SND_QUEUELEN. If the number of pbufs queued on a pcb drops below this number, select returns writable (combined with TCP_SNDLOWAT). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1189" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1ga50b434a8541a4813f7b27f576c05d1b6" prot="public" static="no">
        <name>TCP_SYNMAXRTX</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TCP_SYNMAXRTX: Maximum number of retransmissions of SYN segments. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1124" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1gacd5b25ea81d2894790d25da5393cdab4" prot="public" static="no">
        <name>TCP_TTL</name>
        <initializer>(<ref refid="group__lwip__opts__ipv4_1ga556b9b58fd02c0fdd126791baef77411" kindref="member">IP_DEFAULT_TTL</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TCP_TTL: Default Time-To-Live value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1099" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1099" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1ga7f535a6efb5cdf86c3210e35ece1d6a7" prot="public" static="no">
        <name>TCP_WND</name>
        <initializer>(4 * <ref refid="group__lwip__opts__tcp_1gaf1ab7bb27860aa3677c387a2f3ba317b" kindref="member">TCP_MSS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TCP_WND: The size of a TCP window. This must be at least (2 * TCP_MSS) for things to work well. ATTENTION: when using TCP_RCV_SCALE, TCP_WND is the total size with scaling applied. Maximum window value in the TCP header will be TCP_WND &gt;&gt; TCP_RCV_SCALE </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1110" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lwip__opts__tcp_1ga5d45732ba3a8438b141096d86e07ef8d" prot="public" static="no">
        <name>TCP_WND_UPDATE_THRESHOLD</name>
        <initializer><ref refid="def_8h_1a748f5df614a3fc989e8900fd229d6e4e" kindref="member">LWIP_MIN</ref>((<ref refid="group__lwip__opts__tcp_1ga7f535a6efb5cdf86c3210e35ece1d6a7" kindref="member">TCP_WND</ref> / 4), (<ref refid="group__lwip__opts__tcp_1gaf1ab7bb27860aa3677c387a2f3ba317b" kindref="member">TCP_MSS</ref> * 4))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TCP_WND_UPDATE_THRESHOLD: difference in window to trigger an explicit window update </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/opt.h" line="1257" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/opt.h" bodystart="1257" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
