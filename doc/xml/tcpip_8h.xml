<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="tcpip_8h" kind="file" language="C++">
    <compoundname>tcpip.h</compoundname>
    <includes refid="opt_8h" local="yes">net/opt.h</includes>
    <includes refid="err_8h" local="yes">net/err.h</includes>
    <includes refid="timeouts_8h" local="yes">net/timeouts.h</includes>
    <includes refid="netif_8h" local="yes">net/netif.h</includes>
    <includedby refid="tcpip__priv_8h" local="yes">C:/Dev/git/UbixOS/sys/include/net/priv/tcpip_priv.h</includedby>
    <includedby refid="net_2init_8c" local="no">C:/Dev/git/UbixOS/sys/net/net/init.c</includedby>
    <includedby refid="ethernetif_8c" local="no">C:/Dev/git/UbixOS/sys/net/netif/ethernetif.c</includedby>
    <incdepgraph>
      <node id="36">
        <label>ufs/ufs.h</label>
        <link refid="ufs_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>stdarg.h</label>
        <link refid="stdarg_8h"/>
      </node>
      <node id="18">
        <label>ubixos/kpanic.h</label>
        <link refid="kpanic_8h"/>
      </node>
      <node id="41">
        <label>ubixos/sem.h</label>
        <link refid="sem_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>sys/tss.h</label>
        <link refid="tss_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>sys/io.h</label>
        <link refid="io_8h"/>
      </node>
      <node id="48">
        <label>net/pbuf.h</label>
        <link refid="pbuf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>ubixos/errno.h</label>
        <link refid="ubixos_2errno_8h"/>
      </node>
      <node id="39">
        <label>ubixos/tty.h</label>
        <link refid="tty_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>net/priv/memp_priv.h</label>
        <link refid="memp__priv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>i386/cpu.h</label>
        <link refid="i386_2cpu_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>sys/select.h</label>
        <link refid="select_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>vfs/inode.h</label>
        <link refid="inode_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>net/sys.h</label>
        <link refid="sys_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>net/timeouts.h</label>
        <link refid="timeouts_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>ubixos/ubthread.h</label>
        <link refid="ubthread_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>net/arch/cc.h</label>
        <link refid="cc_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>sys/_sigset.h</label>
        <link refid="__sigset_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>net/mem.h</label>
        <link refid="mem_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>net/stats.h</label>
        <link refid="stats_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>net/lwipopts.h</label>
        <link refid="lwipopts_8h"/>
      </node>
      <node id="22">
        <label>net/arch/sys_arch.h</label>
        <link refid="sys__arch_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>vfs/mount.h</label>
        <link refid="mount_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>sys/resource.h</label>
        <link refid="resource_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>sys/trap.h</label>
        <link refid="trap_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>sys/types.h</label>
        <link refid="include_2sys_2types_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Dev/git/UbixOS/sys/include/net/tcpip.h</label>
        <link refid="tcpip_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>vfs/file.h</label>
        <link refid="include_2vfs_2file_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>net/def.h</label>
        <link refid="def_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>net/netif.h</label>
        <link refid="netif_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>net/arch.h</label>
        <link refid="arch_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>fs/msdos_fs.h</label>
        <link refid="msdos__fs_8h"/>
      </node>
      <node id="30">
        <label>sys/signal.h</label>
        <link refid="sys_2signal_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>fs/pipe_fs.h</label>
        <link refid="pipe__fs_8h"/>
      </node>
      <node id="33">
        <label>ubixos/wait.h</label>
        <link refid="wait_8h"/>
      </node>
      <node id="47">
        <label>net/ip6_addr.h</label>
        <link refid="ip6__addr_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>net/opt.h</label>
        <link refid="opt_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>lib/kprintf.h</label>
        <link refid="kprintf_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>net/debug.h</label>
        <link refid="debug_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>net/ip4_addr.h</label>
        <link refid="ip4__addr_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>net/ip_addr.h</label>
        <link refid="ip__addr_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>sys/thread.h</label>
        <link refid="thread_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>net/priv/memp_std.h</label>
        <link refid="memp__std_8h"/>
      </node>
      <node id="9">
        <label>sys/cdefs.h</label>
        <link refid="cdefs_8h"/>
      </node>
      <node id="14">
        <label>ubixos/time.h</label>
        <link refid="time_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>ubixos/sched.h</label>
        <link refid="sched_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>sys/_types.h</label>
        <link refid="__types_8h"/>
      </node>
      <node id="19">
        <label>net/err.h</label>
        <link refid="err_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>sys/_timespec.h</label>
        <link refid="__timespec_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>sys/device.h</label>
        <link refid="include_2sys_2device_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>ubixfs/dirCache.h</label>
        <link refid="dirCache_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>sys/_timeval.h</label>
        <link refid="__timeval_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>net/memp.h</label>
        <link refid="memp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>C:/Dev/git/UbixOS/sys/net/api/tcpip.c</label>
        <link refid="tcpip_8c"/>
      </node>
      <node id="2">
        <label>C:/Dev/git/UbixOS/sys/include/net/priv/tcpip_priv.h</label>
        <link refid="tcpip__priv_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Dev/git/UbixOS/sys/include/net/tcpip.h</label>
        <link refid="tcpip_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>C:/Dev/git/UbixOS/sys/net/netif/ethernetif.c</label>
        <link refid="ethernetif_8c"/>
      </node>
      <node id="4">
        <label>C:/Dev/git/UbixOS/sys/net/core/memp.c</label>
        <link refid="memp_8c"/>
      </node>
      <node id="5">
        <label>C:/Dev/git/UbixOS/sys/net/core/timeouts.c</label>
        <link refid="timeouts_8c"/>
      </node>
      <node id="6">
        <label>C:/Dev/git/UbixOS/sys/net/net/init.c</label>
        <link refid="net_2init_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="tcpip_8h_1a4700525e737fc025fea4887b172e0c95" prot="public" static="no">
        <name>LOCK_TCPIP_CORE</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" line="60" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tcpip_8h_1a7eb868a1215472ec38f3f2a04d442b9f" prot="public" static="no">
        <name>tcpip_callback</name>
        <param><defname>f</defname></param>
        <param><defname>ctx</defname></param>
        <initializer><ref refid="tcpip_8c_1ab1d3ef23817d7703fa75ed67bd45ea1d" kindref="member">tcpip_callback_with_block</ref>(f, ctx, 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="tcpip_8h_1ab1d3ef23817d7703fa75ed67bd45ea1d" kindref="member">tcpip_callback_with_block</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" line="85" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tcpip_8h_1a915effea029b9c4891e1ec635eb1826d" prot="public" static="no">
        <name>UNLOCK_TCPIP_CORE</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" line="61" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="tcpip_8h_1a35203296bb838f3b493839ffc6e7285d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* tcpip_callback_fn) (void *ctx)</definition>
        <argsstring>)(void *ctx)</argsstring>
        <name>tcpip_callback_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function prototype for functions passed to <ref refid="tcpip_8h_1a7eb868a1215472ec38f3f2a04d442b9f" kindref="member">tcpip_callback()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" line="70" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="tcpip_8h_1a5fe07216c441e27c3028bcac60fa0992" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* tcpip_init_done_fn) (void *arg)</definition>
        <argsstring>)(void *arg)</argsstring>
        <name>tcpip_init_done_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function prototype for the init_done function passed to tcpip_init </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" line="68" column="9" bodyfile="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="tcpip_8h_1a55b4de3765c6a37b3f2b26a11603771c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__infrastructure__errors_1gaf02d9da80fd66b4f986d2c53d7231ddb" kindref="member">err_t</ref></type>
        <definition>err_t mem_free_callback</definition>
        <argsstring>(void *m)</argsstring>
        <name>mem_free_callback</name>
        <param>
          <type>void *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A simple wrapper function that allows you to free heap memory from interrupt context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the heap memory to free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ERR_OK if callback could be enqueued, an err_t if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" line="93" column="8" bodyfile="C:/Dev/git/UbixOS/sys/net/api/tcpip.c" bodystart="491" bodyend="493" declfile="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" declline="93" declcolumn="8"/>
        <references refid="mem_8h_1a2fd7aa1adf6e394d3be7c7734e7df41a" compoundref="mem_8c" startline="419" endline="465">mem_free</references>
        <references refid="tcpip_8c_1ab1d3ef23817d7703fa75ed67bd45ea1d" compoundref="tcpip_8c" startline="229" endline="252">tcpip_callback_with_block</references>
      </memberdef>
      <memberdef kind="function" id="tcpip_8h_1a5cdcb6b784fe0e8736a5b31a5cfbed6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__infrastructure__errors_1gaf02d9da80fd66b4f986d2c53d7231ddb" kindref="member">err_t</ref></type>
        <definition>err_t pbuf_free_callback</definition>
        <argsstring>(struct pbuf *p)</argsstring>
        <name>pbuf_free_callback</name>
        <param>
          <type>struct <ref refid="structpbuf" kindref="compound">pbuf</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A simple wrapper function that allows you to free a pbuf from interrupt context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pbuf (chain) to be dereferenced. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ERR_OK if callback could be enqueued, an err_t if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" line="92" column="8" bodyfile="C:/Dev/git/UbixOS/sys/net/api/tcpip.c" bodystart="480" bodyend="482" declfile="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" declline="92" declcolumn="8"/>
        <references refid="tcpip_8c_1ab1d3ef23817d7703fa75ed67bd45ea1d" compoundref="tcpip_8c" startline="229" endline="252">tcpip_callback_with_block</references>
      </memberdef>
      <memberdef kind="function" id="tcpip_8h_1ab1d3ef23817d7703fa75ed67bd45ea1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__infrastructure__errors_1gaf02d9da80fd66b4f986d2c53d7231ddb" kindref="member">err_t</ref></type>
        <definition>err_t tcpip_callback_with_block</definition>
        <argsstring>(tcpip_callback_fn function, void *ctx, u8_t block)</argsstring>
        <name>tcpip_callback_with_block</name>
        <param>
          <type><ref refid="tcpip_8h_1a35203296bb838f3b493839ffc6e7285d" kindref="member">tcpip_callback_fn</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="group__compiler__abstraction_1ga4caecabca98b43919dd11be1c0d4cd8e" kindref="member">u8_t</ref></type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call a specific function in the thread context of tcpip_thread for easy access synchronization. A function called in that way may access lwIP core code without fearing concurrent access.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to call </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter passed to f </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>1 to block until the request is posted, 0 to non-blocking mode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ERR_OK if the function was called, another err_t if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" line="80" column="8" bodyfile="C:/Dev/git/UbixOS/sys/net/api/tcpip.c" bodystart="229" bodyend="252" declfile="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" declline="80" declcolumn="8"/>
        <references refid="debug_8h_1a94ad086267808462beae2b38f91996ed" compoundref="debug_8h" startline="116">LWIP_ASSERT</references>
        <references refid="structtcpip__msg_1a18c49fcbcfeb09f203a6fb84e74e367b" compoundref="tcpip__priv_8h" startline="128">tcpip_msg::msg</references>
        <references refid="sys_8h_1aae82640d0bdbeec7b9b6511b3f8d99cb" compoundref="sys_8h" startline="271">sys_mbox_valid_val</references>
        <referencedby refid="tcpip_8c_1a55b4de3765c6a37b3f2b26a11603771c" compoundref="tcpip_8c" startline="491" endline="493">mem_free_callback</referencedby>
        <referencedby refid="tcpip_8c_1a5cdcb6b784fe0e8736a5b31a5cfbed6c" compoundref="tcpip_8c" startline="480" endline="482">pbuf_free_callback</referencedby>
      </memberdef>
      <memberdef kind="function" id="tcpip_8h_1ac5b7a59f4c3f5f721ab9ee81f231c9fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tcpip_callbackmsg_delete</definition>
        <argsstring>(struct tcpip_callback_msg *msg)</argsstring>
        <name>tcpip_callbackmsg_delete</name>
        <param>
          <type>struct tcpip_callback_msg *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free a callback message allocated by <ref refid="tcpip_8c_1aee14fa2587a9ba9d23e4c7e16c4526ac" kindref="member">tcpip_callbackmsg_new()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" line="88" column="8" bodyfile="C:/Dev/git/UbixOS/sys/net/api/tcpip.c" bodystart="421" bodyend="423" declfile="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" declline="88" declcolumn="8"/>
        <references refid="memp_8h_1aecd94926b7c2a0e23ae195f4ae97581f" compoundref="memp_8c" startline="469" endline="496">memp_free</references>
        <references refid="structtcpip__msg_1a18c49fcbcfeb09f203a6fb84e74e367b" compoundref="tcpip__priv_8h" startline="128">tcpip_msg::msg</references>
      </memberdef>
      <memberdef kind="function" id="tcpip_8h_1aee14fa2587a9ba9d23e4c7e16c4526ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct tcpip_callback_msg *</type>
        <definition>struct tcpip_callback_msg* tcpip_callbackmsg_new</definition>
        <argsstring>(tcpip_callback_fn function, void *ctx)</argsstring>
        <name>tcpip_callbackmsg_new</name>
        <param>
          <type><ref refid="tcpip_8h_1a35203296bb838f3b493839ffc6e7285d" kindref="member">tcpip_callback_fn</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a structure for a static callback message and initialize it. This is intended to be used to send &quot;static&quot; messages from interrupt context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to call </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter passed to function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a struct pointer to pass to <ref refid="tcpip_8c_1acfc81ad493f68714a22b3b8ea7d04378" kindref="member">tcpip_trycallback()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" line="87" column="26" bodyfile="C:/Dev/git/UbixOS/sys/net/api/tcpip.c" bodystart="405" bodyend="414" declfile="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" declline="87" declcolumn="26"/>
        <references refid="structtcpip__msg_1a7edb4f4e181f9cffbef13dc7a7d41d8b" compoundref="tcpip__priv_8h" startline="142">tcpip_msg::ctx</references>
        <references refid="memp_8h_1a2b00593d086313c267b54a976bf67aa5" compoundref="memp_8c" startline="385" endline="404">memp_malloc</references>
        <references refid="structtcpip__msg_1a18c49fcbcfeb09f203a6fb84e74e367b" compoundref="tcpip__priv_8h" startline="128">tcpip_msg::msg</references>
        <references refid="fat__string_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="fat__string_8h" startline="17">NULL</references>
        <references refid="tcpip__priv_8h_1a1e0cb5032a61055e3f4a3426ed548937a17160cdc581db556a47a57cd4efb3b78" compoundref="tcpip__priv_8h" startline="120">TCPIP_MSG_CALLBACK_STATIC</references>
      </memberdef>
      <memberdef kind="function" id="tcpip_8h_1ac104b53faf0e3905ad0e970866835661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tcpip_init</definition>
        <argsstring>(tcpip_init_done_fn tcpip_init_done, void *arg)</argsstring>
        <name>tcpip_init</name>
        <param>
          <type><ref refid="tcpip_8h_1a5fe07216c441e27c3028bcac60fa0992" kindref="member">tcpip_init_done_fn</ref></type>
          <declname>tcpip_init_done</declname>
          <defname>initfunc</defname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize this module:<itemizedlist>
<listitem><para>initialize all sub modules</para>
</listitem><listitem><para>start the tcpip_thread</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initfunc</parametername>
</parameternamelist>
<parameterdescription>
<para>a function to call when tcpip_thread is running and finished initializing </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>argument to pass to initfunc </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" line="75" column="8" bodyfile="C:/Dev/git/UbixOS/sys/net/api/tcpip.c" bodystart="446" bodyend="461" declfile="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" declline="75" declcolumn="8"/>
        <references refid="net_2init_8h_1a0c1a18439524d2f4a5e51d25c0ca2ce9" compoundref="core_2init_8c" startline="333" endline="381">lwip_init</references>
        <referencedby refid="net_2init_8c_1a22b2914249628f6cba7d4e1f138c969f" compoundref="net_2init_8c" startline="52" endline="70">net_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="tcpip_8h_1a93043b3c66dbe4a15a60299c6199d102" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__infrastructure__errors_1gaf02d9da80fd66b4f986d2c53d7231ddb" kindref="member">err_t</ref></type>
        <definition>err_t tcpip_inpkt</definition>
        <argsstring>(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)</argsstring>
        <name>tcpip_inpkt</name>
        <param>
          <type>struct <ref refid="structpbuf" kindref="compound">pbuf</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>struct <ref refid="structnetif" kindref="compound">netif</ref> *</type>
          <declname>inp</declname>
        </param>
        <param>
          <type><ref refid="netif_8h_1ab2302b1b64ac7b95f24c6bab754a575e" kindref="member">netif_input_fn</ref></type>
          <declname>input_fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pass a received packet to tcpip_thread for input processing</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the received packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inp</parametername>
</parameternamelist>
<parameterdescription>
<para>the network interface on which the packet was received </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>input function to call </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" line="77" column="8" bodyfile="C:/Dev/git/UbixOS/sys/net/api/tcpip.c" bodystart="161" bodyend="191" declfile="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" declline="77" declcolumn="8"/>
        <references refid="structtcpip__msg_1a7d9bc654de358efed5d9737a77bd7c71">tcpip_msg::inp</references>
        <references refid="structtcpip__msg_1a44fe1469e2472890fe71ebbc1427a19b" compoundref="tcpip__priv_8h" startline="138">tcpip_msg::input_fn</references>
        <references refid="tcpip_8h_1a4700525e737fc025fea4887b172e0c95" compoundref="tcpip_8h" startline="60">LOCK_TCPIP_CORE</references>
        <references refid="debug_8h_1a94ad086267808462beae2b38f91996ed" compoundref="debug_8h" startline="116">LWIP_ASSERT</references>
        <references refid="debug_8h_1a63a04edf7ff63c951bd8706711956cdb" compoundref="debug_8h" startline="164">LWIP_DEBUGF</references>
        <references refid="structtcpip__msg_1a18c49fcbcfeb09f203a6fb84e74e367b" compoundref="tcpip__priv_8h" startline="128">tcpip_msg::msg</references>
        <references refid="structtcpip__msg_1a9298bc5d6d92c5efd478dac92c09459b" compoundref="tcpip__priv_8h" startline="136">tcpip_msg::p</references>
        <references refid="sys_8h_1aae82640d0bdbeec7b9b6511b3f8d99cb" compoundref="sys_8h" startline="271">sys_mbox_valid_val</references>
        <references refid="lwipopts_8h_1a52d6c83451936c3de3b0338d4a3f921f" compoundref="lwipopts_8h" startline="482">TCPIP_DEBUG</references>
        <references refid="tcpip_8h_1a915effea029b9c4891e1ec635eb1826d" compoundref="tcpip_8h" startline="61">UNLOCK_TCPIP_CORE</references>
        <referencedby refid="tcpip_8c_1ae510f195171bed8499ae94e264a92717" compoundref="tcpip_8c" startline="204" endline="216">tcpip_input</referencedby>
      </memberdef>
      <memberdef kind="function" id="tcpip_8h_1ae510f195171bed8499ae94e264a92717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__infrastructure__errors_1gaf02d9da80fd66b4f986d2c53d7231ddb" kindref="member">err_t</ref></type>
        <definition>err_t tcpip_input</definition>
        <argsstring>(struct pbuf *p, struct netif *inp)</argsstring>
        <name>tcpip_input</name>
        <param>
          <type>struct <ref refid="structpbuf" kindref="compound">pbuf</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>struct <ref refid="structnetif" kindref="compound">netif</ref> *</type>
          <declname>inp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pass a received packet to tcpip_thread for input processing with ethernet_input or ip_input. Don&apos;t call directly, pass to <ref refid="group__netif_1ga66970b5877dd6b0cae906bfa78d0cb4c" kindref="member">netif_add()</ref> and call netif-&gt;input().</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the received packet, p-&gt;payload pointing to the Ethernet header or to an IP header (if inp doesn&apos;t have NETIF_FLAG_ETHARP or NETIF_FLAG_ETHERNET flags) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inp</parametername>
</parameternamelist>
<parameterdescription>
<para>the network interface on which the packet was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" line="78" column="8" bodyfile="C:/Dev/git/UbixOS/sys/net/api/tcpip.c" bodystart="204" bodyend="216" declfile="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" declline="78" declcolumn="8"/>
        <references refid="structtcpip__msg_1a7d9bc654de358efed5d9737a77bd7c71">tcpip_msg::inp</references>
        <references refid="group__netif__flags_1ga92448dc510bc8d700c09e5c971ef0676" compoundref="netif_8h" startline="99">NETIF_FLAG_ETHARP</references>
        <references refid="group__netif__flags_1ga76ad9d0cf9f029df0ab2a998c64040dc" compoundref="netif_8h" startline="103">NETIF_FLAG_ETHERNET</references>
        <references refid="structtcpip__msg_1a9298bc5d6d92c5efd478dac92c09459b" compoundref="tcpip__priv_8h" startline="136">tcpip_msg::p</references>
        <references refid="tcpip_8c_1a93043b3c66dbe4a15a60299c6199d102" compoundref="tcpip_8c" startline="161" endline="191">tcpip_inpkt</references>
        <referencedby refid="net_2init_8c_1a22b2914249628f6cba7d4e1f138c969f" compoundref="net_2init_8c" startline="52" endline="70">net_init</referencedby>
        <referencedby refid="netif_8c_1a0f4a53e47c840904f824a2a1c0d4ebf4" compoundref="netif_8c" startline="163" endline="191">netif_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="tcpip_8h_1acfc81ad493f68714a22b3b8ea7d04378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__infrastructure__errors_1gaf02d9da80fd66b4f986d2c53d7231ddb" kindref="member">err_t</ref></type>
        <definition>err_t tcpip_trycallback</definition>
        <argsstring>(struct tcpip_callback_msg *msg)</argsstring>
        <name>tcpip_trycallback</name>
        <param>
          <type>struct tcpip_callback_msg *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Try to post a callback-message to the tcpip_thread mbox This is intended to be used to send &quot;static&quot; messages from interrupt context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the message to post </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__sys__mbox_1gacc06f47f34de04084e1d49788ce871b6" kindref="member">sys_mbox_trypost()</ref> return code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" line="89" column="8" bodyfile="C:/Dev/git/UbixOS/sys/net/api/tcpip.c" bodystart="432" bodyend="435" declfile="C:/Dev/git/UbixOS/sys/include/net/tcpip.h" declline="89" declcolumn="8"/>
        <references refid="debug_8h_1a94ad086267808462beae2b38f91996ed" compoundref="debug_8h" startline="116">LWIP_ASSERT</references>
        <references refid="sys_8h_1aae82640d0bdbeec7b9b6511b3f8d99cb" compoundref="sys_8h" startline="271">sys_mbox_valid_val</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Functions to sync with TCPIP thread </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2001-2004<sp/>Swedish<sp/>Institute<sp/>of<sp/>Computer<sp/>Science.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/>modification,</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>3.<sp/>The<sp/>name<sp/>of<sp/>the<sp/>author<sp/>may<sp/>not<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>AUTHOR<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>lwIP<sp/>TCP/IP<sp/>stack.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Adam<sp/>Dunkels<sp/>&lt;adam@sics.se&gt;</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LWIP_HDR_TCPIP_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LWIP_HDR_TCPIP_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="opt_8h" kindref="compound">net/opt.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!NO_SYS<sp/></highlight><highlight class="comment">/*<sp/>don&apos;t<sp/>build<sp/>if<sp/>not<sp/>configured<sp/>for<sp/>use<sp/>in<sp/>lwipopts.h<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="err_8h" kindref="compound">net/err.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="timeouts_8h" kindref="compound">net/timeouts.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="netif_8h" kindref="compound">net/netif.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LWIP_TCPIP_CORE_LOCKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structsys__mutex" kindref="compound">sys_mutex_t</ref><sp/>lock_tcpip_core;</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor">#define<sp/>LOCK_TCPIP_CORE()<sp/><sp/><sp/><sp/><sp/>sys_mutex_lock(&amp;lock_tcpip_core)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor">#define<sp/>UNLOCK_TCPIP_CORE()<sp/><sp/><sp/>sys_mutex_unlock(&amp;lock_tcpip_core)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>LWIP_TCPIP_CORE_LOCKING<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="tcpip_8h_1a4700525e737fc025fea4887b172e0c95" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOCK_TCPIP_CORE()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="tcpip_8h_1a915effea029b9c4891e1ec635eb1826d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UNLOCK_TCPIP_CORE()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LWIP_TCPIP_CORE_LOCKING<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpbuf" kindref="compound">pbuf</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnetif" kindref="compound">netif</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="tcpip_8h_1a5fe07216c441e27c3028bcac60fa0992" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="tcpip_8h_1a5fe07216c441e27c3028bcac60fa0992" kindref="member">tcpip_init_done_fn</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="70" refid="tcpip_8h_1a35203296bb838f3b493839ffc6e7285d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="tcpip_8h_1a35203296bb838f3b493839ffc6e7285d" kindref="member">tcpip_callback_fn</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Forward<sp/>declarations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tcpip_callback_msg;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="tcpip_8h_1ac104b53faf0e3905ad0e970866835661" kindref="member">tcpip_init</ref>(<ref refid="tcpip_8h_1a5fe07216c441e27c3028bcac60fa0992" kindref="member">tcpip_init_done_fn</ref><sp/>tcpip_init_done,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="group__infrastructure__errors_1gaf02d9da80fd66b4f986d2c53d7231ddb" kindref="member">err_t</ref><sp/><sp/><ref refid="tcpip_8h_1a93043b3c66dbe4a15a60299c6199d102" kindref="member">tcpip_inpkt</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpbuf" kindref="compound">pbuf</ref><sp/>*p,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnetif" kindref="compound">netif</ref><sp/>*inp,<sp/><ref refid="netif_8h_1ab2302b1b64ac7b95f24c6bab754a575e" kindref="member">netif_input_fn</ref><sp/>input_fn);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><ref refid="group__infrastructure__errors_1gaf02d9da80fd66b4f986d2c53d7231ddb" kindref="member">err_t</ref><sp/><sp/><ref refid="tcpip_8h_1ae510f195171bed8499ae94e264a92717" kindref="member">tcpip_input</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpbuf" kindref="compound">pbuf</ref><sp/>*p,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnetif" kindref="compound">netif</ref><sp/>*inp);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><ref refid="group__infrastructure__errors_1gaf02d9da80fd66b4f986d2c53d7231ddb" kindref="member">err_t</ref><sp/><sp/><ref refid="tcpip_8h_1ab1d3ef23817d7703fa75ed67bd45ea1d" kindref="member">tcpip_callback_with_block</ref>(<ref refid="tcpip_8h_1a35203296bb838f3b493839ffc6e7285d" kindref="member">tcpip_callback_fn</ref><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,<sp/><ref refid="group__compiler__abstraction_1ga4caecabca98b43919dd11be1c0d4cd8e" kindref="member">u8_t</ref><sp/>block);</highlight></codeline>
<codeline lineno="85" refid="tcpip_8h_1a7eb868a1215472ec38f3f2a04d442b9f" refkind="member"><highlight class="preprocessor">#define<sp/>tcpip_callback(f,<sp/>ctx)<sp/><sp/>tcpip_callback_with_block(f,<sp/>ctx,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tcpip_callback_msg*<sp/><ref refid="tcpip_8h_1aee14fa2587a9ba9d23e4c7e16c4526ac" kindref="member">tcpip_callbackmsg_new</ref>(<ref refid="tcpip_8h_1a35203296bb838f3b493839ffc6e7285d" kindref="member">tcpip_callback_fn</ref><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="tcpip_8h_1ac5b7a59f4c3f5f721ab9ee81f231c9fd" kindref="member">tcpip_callbackmsg_delete</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>tcpip_callback_msg*<sp/>msg);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><ref refid="group__infrastructure__errors_1gaf02d9da80fd66b4f986d2c53d7231ddb" kindref="member">err_t</ref><sp/><sp/><ref refid="tcpip_8h_1acfc81ad493f68714a22b3b8ea7d04378" kindref="member">tcpip_trycallback</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>tcpip_callback_msg*<sp/>msg);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>free<sp/>pbufs<sp/>or<sp/>heap<sp/>memory<sp/>from<sp/>another<sp/>context<sp/>without<sp/>blocking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><ref refid="group__infrastructure__errors_1gaf02d9da80fd66b4f986d2c53d7231ddb" kindref="member">err_t</ref><sp/><sp/><ref refid="tcpip_8h_1a5cdcb6b784fe0e8736a5b31a5cfbed6c" kindref="member">pbuf_free_callback</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpbuf" kindref="compound">pbuf</ref><sp/>*p);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><ref refid="group__infrastructure__errors_1gaf02d9da80fd66b4f986d2c53d7231ddb" kindref="member">err_t</ref><sp/><sp/><ref refid="tcpip_8h_1a55b4de3765c6a37b3f2b26a11603771c" kindref="member">mem_free_callback</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*m);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LWIP_TCPIP_TIMEOUT<sp/>&amp;&amp;<sp/>LWIP_TIMERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><ref refid="group__infrastructure__errors_1gaf02d9da80fd66b4f986d2c53d7231ddb" kindref="member">err_t</ref><sp/><sp/>tcpip_timeout(<ref refid="group__compiler__abstraction_1ga4c14294869aceba3ef9d4c0c302d0f33" kindref="member">u32_t</ref><sp/>msecs,<sp/>sys_timeout_handler<sp/>h,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><ref refid="group__infrastructure__errors_1gaf02d9da80fd66b4f986d2c53d7231ddb" kindref="member">err_t</ref><sp/><sp/>tcpip_untimeout(sys_timeout_handler<sp/>h,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LWIP_TCPIP_TIMEOUT<sp/>&amp;&amp;<sp/>LWIP_TIMERS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!NO_SYS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LWIP_HDR_TCPIP_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Dev/git/UbixOS/sys/include/net/tcpip.h"/>
  </compounddef>
</doxygen>
