<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="mem_8h" kind="file">
    <compoundname>mem.h</compoundname>
    <includes refid="types_8h" local="no">ubixos/types.h</includes>
    <includes refid="debug_8h" local="yes">net/debug.h</includes>
    <includes refid="opt_8h" local="yes">net/opt.h</includes>
    <includes refid="arch_8h" local="yes">net/arch.h</includes>
    <includedby refid="tcp_8h" local="yes">src/sys/include/net/tcp.h</includedby>
    <includedby refid="bot_8c" local="yes">src/sys/net/net/bot.c</includedby>
    <includedby refid="init_8c" local="no">src/sys/net/net/init.c</includedby>
    <includedby refid="shell_8c" local="yes">src/sys/net/net/shell.c</includedby>
    <includedby refid="ethernetif_8c" local="yes">src/sys/net/netif/ethernetif.c</includedby>
    <includedby refid="loopif_8c" local="yes">src/sys/net/netif/loopif.c</includedby>
    <incdepgraph>
      <node id="847">
        <label>arch/cpu.h</label>
        <link refid="cpu_8h"/>
      </node>
      <node id="841">
        <label>ubixos/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="842" relation="include">
        </childnode>
      </node>
      <node id="842">
        <label>sys/_types.h</label>
        <link refid="__types_8h"/>
      </node>
      <node id="846">
        <label>net/arch.h</label>
        <link refid="arch_8h"/>
        <childnode refid="847" relation="include">
        </childnode>
        <childnode refid="848" relation="include">
        </childnode>
      </node>
      <node id="845">
        <label>net/lwipopts.h</label>
        <link refid="lwipopts_8h"/>
      </node>
      <node id="840">
        <label>src/sys/include/net/mem.h</label>
        <link refid="mem.h"/>
        <childnode refid="841" relation="include">
        </childnode>
        <childnode refid="843" relation="include">
        </childnode>
        <childnode refid="844" relation="include">
        </childnode>
        <childnode refid="846" relation="include">
        </childnode>
      </node>
      <node id="844">
        <label>net/opt.h</label>
        <link refid="opt_8h"/>
        <childnode refid="845" relation="include">
        </childnode>
      </node>
      <node id="843">
        <label>net/debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="848">
        <label>arch/cc.h</label>
        <link refid="cc_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="861">
        <label>src/sys/net/net/udpecho.c</label>
        <link refid="udpecho_8c"/>
      </node>
      <node id="863">
        <label>src/sys/net/netif/tcpdump.c</label>
        <link refid="tcpdump_8c"/>
      </node>
      <node id="862">
        <label>src/sys/net/netif/loopif.c</label>
        <link refid="loopif_8c"/>
      </node>
      <node id="850">
        <label>src/sys/include/net/tcp.h</label>
        <link refid="tcp_8h"/>
        <childnode refid="851" relation="include">
        </childnode>
        <childnode refid="852" relation="include">
        </childnode>
        <childnode refid="855" relation="include">
        </childnode>
        <childnode refid="862" relation="include">
        </childnode>
        <childnode refid="863" relation="include">
        </childnode>
      </node>
      <node id="864">
        <label>src/sys/net/netif/ethernetif.c</label>
        <link refid="ethernetif_8c"/>
      </node>
      <node id="859">
        <label>src/sys/net/net/bot.c</label>
        <link refid="bot_8c"/>
      </node>
      <node id="855">
        <label>src/sys/net/api/tcpip.c</label>
        <link refid="tcpip_8c"/>
      </node>
      <node id="853">
        <label>src/sys/include/net/tcpip.h</label>
        <link refid="tcpip_8h"/>
        <childnode refid="854" relation="include">
        </childnode>
        <childnode refid="855" relation="include">
        </childnode>
        <childnode refid="856" relation="include">
        </childnode>
      </node>
      <node id="852">
        <label>src/sys/include/net/api_msg.h</label>
        <link refid="api__msg_8h"/>
        <childnode refid="853" relation="include">
        </childnode>
        <childnode refid="857" relation="include">
        </childnode>
        <childnode refid="854" relation="include">
        </childnode>
      </node>
      <node id="860">
        <label>src/sys/net/net/shell.c</label>
        <link refid="shell_8c"/>
      </node>
      <node id="857">
        <label>src/sys/net/api/api_lib.c</label>
        <link refid="api__lib_8c"/>
      </node>
      <node id="849">
        <label>src/sys/include/net/mem.h</label>
        <link refid="mem.h"/>
        <childnode refid="850" relation="include">
        </childnode>
        <childnode refid="859" relation="include">
        </childnode>
        <childnode refid="856" relation="include">
        </childnode>
        <childnode refid="860" relation="include">
        </childnode>
        <childnode refid="864" relation="include">
        </childnode>
        <childnode refid="862" relation="include">
        </childnode>
      </node>
      <node id="856">
        <label>src/sys/net/net/init.c</label>
        <link refid="init_8c"/>
      </node>
      <node id="851">
        <label>src/sys/include/net/api.h</label>
        <link refid="api_8h"/>
        <childnode refid="852" relation="include">
        </childnode>
        <childnode refid="857" relation="include">
        </childnode>
        <childnode refid="858" relation="include">
        </childnode>
        <childnode refid="859" relation="include">
        </childnode>
        <childnode refid="860" relation="include">
        </childnode>
        <childnode refid="861" relation="include">
        </childnode>
      </node>
      <node id="858">
        <label>src/sys/net/api/sockets.c</label>
        <link refid="sockets_8c"/>
      </node>
      <node id="854">
        <label>src/sys/net/api/api_msg.c</label>
        <link refid="api__msg_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="mem_8h_148eddc916e5bfd9eda620326ccae4a4e" prot="public" static="no">
        <name>MEM_ALIGN</name>
        <param><defname>addr</defname></param>
        <initializer>(void *)MEM_ALIGN_SIZE((<ref refid="types_8h_15847ea0262a5aa61eee48cbe95544a78" kindref="member">uInt32</ref>)addr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/home/reddawg/source/ubix2/src/sys/include/net/mem.h" line="77" bodyfile="/usr/home/reddawg/source/ubix2/src/sys/include/net/mem.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem_8h_13fa83e155c0188df6647fa1af1302c7b" prot="public" static="no">
        <name>MEM_ALIGN_SIZE</name>
        <param><defname>size</defname></param>
        <initializer>(size + \
                             ((((size) % (MEM_ALIGNMENT)) == 0)? 0 : \
                             ((MEM_ALIGNMENT) - ((size) % (MEM_ALIGNMENT)))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/home/reddawg/source/ubix2/src/sys/include/net/mem.h" line="75" bodyfile="/usr/home/reddawg/source/ubix2/src/sys/include/net/mem.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem_8h_146ddfb5564fc2d19ec4e4576d6b3b922" prot="public" static="no">
        <name>mem_register_reclaim</name>
        <param><defname>f</defname></param>
        <param><defname>arg</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/home/reddawg/source/ubix2/src/sys/include/net/mem.h" line="69" bodyfile="/usr/home/reddawg/source/ubix2/src/sys/include/net/mem.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="mem_8h_165c0b1c284dfb0b59b1d514cac6c584e" prot="public" static="no">
        <type><ref refid="types_8h_13b65128d2644e9b80cec9a69bfa7e094" kindref="member">uInt16</ref></type>
        <definition>typedef uInt16 mem_size_t</definition>
        <argsstring></argsstring>
        <name>mem_size_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/home/reddawg/source/ubix2/src/sys/include/net/mem.h" line="47" bodyfile="/usr/home/reddawg/source/ubix2/src/sys/include/net/mem.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="mem_8h_12fd7aa1adf6e394d3be7c7734e7df41a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mem_free</definition>
        <argsstring>(void *mem)</argsstring>
        <name>mem_free</name>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/home/reddawg/source/ubix2/src/sys/include/net/mem.h" line="55"/>
      </memberdef>
      <memberdef kind="function" id="mem_8h_144a136e3b70c36abb6f8dc060c778113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mem_init</definition>
        <argsstring>(void)</argsstring>
        <name>mem_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/home/reddawg/source/ubix2/src/sys/include/net/mem.h" line="51"/>
        <referencedby refid="init_8c_122b2914249628f6cba7d4e1f138c969f" compoundref="init_8c" startline="50" endline="63">net_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="mem_8h_1932aa40d85b14cb7331625e012d12335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mem_malloc</definition>
        <argsstring>(mem_size_t size)</argsstring>
        <name>mem_malloc</name>
        <param>
          <type><ref refid="mem_8h_165c0b1c284dfb0b59b1d514cac6c584e" kindref="member">mem_size_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/home/reddawg/source/ubix2/src/sys/include/net/mem.h" line="53"/>
        <referencedby refid="ethernetif_8c_164753cb7324510825069062660f10926" compoundref="ethernetif_8c" startline="325" endline="341">ethernetif_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="mem_8h_12319b30a933f44a443103f5a3ab68e04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mem_malloc2</definition>
        <argsstring>(mem_size_t size)</argsstring>
        <name>mem_malloc2</name>
        <param>
          <type><ref refid="mem_8h_165c0b1c284dfb0b59b1d514cac6c584e" kindref="member">mem_size_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/home/reddawg/source/ubix2/src/sys/include/net/mem.h" line="54"/>
      </memberdef>
      <memberdef kind="function" id="mem_8h_19dd60a76f40fa38023308f24869eaec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mem_realloc</definition>
        <argsstring>(void *mem, mem_size_t size)</argsstring>
        <name>mem_realloc</name>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type><ref refid="mem_8h_165c0b1c284dfb0b59b1d514cac6c584e" kindref="member">mem_size_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/home/reddawg/source/ubix2/src/sys/include/net/mem.h" line="56"/>
      </memberdef>
      <memberdef kind="function" id="mem_8h_100f0522f4402773c4748242b805dee97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mem_reallocm</definition>
        <argsstring>(void *mem, mem_size_t size)</argsstring>
        <name>mem_reallocm</name>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type><ref refid="mem_8h_165c0b1c284dfb0b59b1d514cac6c584e" kindref="member">mem_size_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/home/reddawg/source/ubix2/src/sys/include/net/mem.h" line="57"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2001,<sp/>Swedish<sp/>Institute<sp/>of<sp/>Computer<sp/>Science.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>Institute<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>INSTITUTE<sp/>AND<sp/>CONTRIBUTORS<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>INSTITUTE<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUCH<sp/>DAMAGE.<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>lwIP<sp/>TCP/IP<sp/>stack.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Adam<sp/>Dunkels<sp/>&lt;adam@sics.se&gt;</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>$Id: mem_8h.xml 88 2016-01-12 00:11:29Z reddawg $</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__LWIP_MEM_H__</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__LWIP_MEM_H__</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="types_8h" kindref="compound">ubixos/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="debug_8h" kindref="compound">net/debug.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="opt_8h" kindref="compound">net/opt.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arch_8h" kindref="compound">net/arch.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MEM_SIZE<sp/>&gt;<sp/>64000l</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="types_8h_15847ea0262a5aa61eee48cbe95544a78" kindref="member">uInt32</ref><sp/><ref refid="mem_8h_165c0b1c284dfb0b59b1d514cac6c584e" kindref="member">mem_size_t</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="47" refid="mem_8h_165c0b1c284dfb0b59b1d514cac6c584e" refkind="member"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="types_8h_13b65128d2644e9b80cec9a69bfa7e094" kindref="member">uInt16</ref><sp/><ref refid="mem_8h_165c0b1c284dfb0b59b1d514cac6c584e" kindref="member">mem_size_t</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MEM_SIZE<sp/>&gt;<sp/>64000<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem_8h_144a136e3b70c36abb6f8dc060c778113" kindref="member">mem_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="mem_8h_1932aa40d85b14cb7331625e012d12335" kindref="member">mem_malloc</ref>(<ref refid="mem_8h_165c0b1c284dfb0b59b1d514cac6c584e" kindref="member">mem_size_t</ref><sp/>size);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="mem_8h_12319b30a933f44a443103f5a3ab68e04" kindref="member">mem_malloc2</ref>(<ref refid="mem_8h_165c0b1c284dfb0b59b1d514cac6c584e" kindref="member">mem_size_t</ref><sp/>size);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem_8h_12fd7aa1adf6e394d3be7c7734e7df41a" kindref="member">mem_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="mem_8h_19dd60a76f40fa38023308f24869eaec6" kindref="member">mem_realloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem,<sp/><ref refid="mem_8h_165c0b1c284dfb0b59b1d514cac6c584e" kindref="member">mem_size_t</ref><sp/>size);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="mem_8h_100f0522f4402773c4748242b805dee97" kindref="member">mem_reallocm</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem,<sp/><ref refid="mem_8h_165c0b1c284dfb0b59b1d514cac6c584e" kindref="member">mem_size_t</ref><sp/>size);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MEM_PERF</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mem_perf_start(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mem_perf_init(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fname);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MEM_PERF<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MEM_RECLAIM</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="mem_8h_165c0b1c284dfb0b59b1d514cac6c584e" kindref="member">mem_size_t</ref><sp/>(*mem_reclaim_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg,<sp/><ref refid="mem_8h_165c0b1c284dfb0b59b1d514cac6c584e" kindref="member">mem_size_t</ref><sp/>size);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem_8h_146ddfb5564fc2d19ec4e4576d6b3b922" kindref="member">mem_register_reclaim</ref>(mem_reclaim_func<sp/>f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mem_reclaim(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="69" refid="mem_8h_146ddfb5564fc2d19ec4e4576d6b3b922" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>mem_register_reclaim(f,<sp/>arg)</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MEM_RECLAIM<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="mem_8h_13fa83e155c0188df6647fa1af1302c7b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEM_ALIGN_SIZE(size)<sp/>(size<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((size)<sp/>%<sp/>(MEM_ALIGNMENT))<sp/>==<sp/>0)?<sp/>0<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((MEM_ALIGNMENT)<sp/>-<sp/>((size)<sp/>%<sp/>(MEM_ALIGNMENT)))))</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="mem_8h_148eddc916e5bfd9eda620326ccae4a4e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEM_ALIGN(addr)<sp/>(void<sp/>*)MEM_ALIGN_SIZE((uInt32)addr)</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__LWIP_MEM_H__<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/usr/home/reddawg/source/ubix2/src/sys/include/net/mem.h"/>
  </compounddef>
</doxygen>
