<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="btree_8cpp" kind="file">
    <compoundname>btree.cpp</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="string_8h" local="no">string.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">iostream</includes>
    <includes refid="assert_8h" local="no">assert.h</includes>
    <includes refid="btree_8h" local="yes">btree.h</includes>
    <includes refid="ubixfsv2_2ubixfs_8h" local="yes">ubixfs.h</includes>
    <incdepgraph>
      <node id="4520">
        <label>btree.h</label>
        <link refid="btree_8h"/>
        <childnode refid="4516" relation="include">
        </childnode>
        <childnode refid="4521" relation="include">
        </childnode>
        <childnode refid="4528" relation="include">
        </childnode>
        <childnode refid="4527" relation="include">
        </childnode>
      </node>
      <node id="4512">
        <label>stdlib.h</label>
      </node>
      <node id="4521">
        <label>ubixfs.h</label>
        <link refid="ubixfsv2_2ubixfs_8h"/>
        <childnode refid="4522" relation="include">
        </childnode>
        <childnode refid="4517" relation="include">
        </childnode>
        <childnode refid="4523" relation="include">
        </childnode>
        <childnode refid="4526" relation="include">
        </childnode>
        <childnode refid="4527" relation="include">
        </childnode>
      </node>
      <node id="4514">
        <label>ubixos/types.h</label>
        <link refid="include_2ubixos_2types_8h"/>
        <childnode refid="4515" relation="include">
        </childnode>
      </node>
      <node id="4515">
        <label>sys/_types.h</label>
        <link refid="__types_8h"/>
      </node>
      <node id="4513">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="4514" relation="include">
        </childnode>
      </node>
      <node id="4528">
        <label>btreeheader.h</label>
        <link refid="btreeheader_8h"/>
      </node>
      <node id="4527">
        <label>file.h</label>
        <link refid="ubixfsv2_2file_8h"/>
        <childnode refid="4521" relation="include">
        </childnode>
      </node>
      <node id="4522">
        <label>sys/types.h</label>
      </node>
      <node id="4523">
        <label>fsAbstract.h</label>
        <link refid="fsAbstract_8h"/>
        <childnode refid="4516" relation="include">
        </childnode>
        <childnode refid="4524" relation="include">
        </childnode>
        <childnode refid="4522" relation="include">
        </childnode>
        <childnode refid="4525" relation="include">
        </childnode>
        <childnode refid="4527" relation="include">
        </childnode>
      </node>
      <node id="4526">
        <label>types.h</label>
        <link refid="ubixfsv2_2types_8h"/>
      </node>
      <node id="4517">
        <label>unistd.h</label>
      </node>
      <node id="4525">
        <label>device.h</label>
        <link refid="ubixfsv2_2device_8h"/>
        <childnode refid="4522" relation="include">
        </childnode>
        <childnode refid="4526" relation="include">
        </childnode>
      </node>
      <node id="4519">
        <label>assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="4518">
        <label>iostream</label>
      </node>
      <node id="4511">
        <label>src/sys/ubixfsv2/btree.cpp</label>
        <link refid="btree.cpp"/>
        <childnode refid="4512" relation="include">
        </childnode>
        <childnode refid="4513" relation="include">
        </childnode>
        <childnode refid="4516" relation="include">
        </childnode>
        <childnode refid="4517" relation="include">
        </childnode>
        <childnode refid="4518" relation="include">
        </childnode>
        <childnode refid="4519" relation="include">
        </childnode>
        <childnode refid="4520" relation="include">
        </childnode>
        <childnode refid="4521" relation="include">
        </childnode>
      </node>
      <node id="4516">
        <label>stdio.h</label>
      </node>
      <node id="4524">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="btree_8cpp_1621fb9a42299fe3892b62a43086d4caf" prot="public" static="no">
        <name>VERIFY</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <param><defname>z</defname></param>
        <param><defname>n</defname></param>
        <initializer>if ((x) != (y)) { cout &lt;&lt; &quot;verify &quot; &lt;&lt; z &lt;&lt; &quot; failed&quot; &lt;&lt; endl; PrintWholeTree(); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/home/reddawg/source/ubix2/src/sys/ubixfsv2/btree.cpp" line="12" bodyfile="/usr/home/reddawg/source/ubix2/src/sys/ubixfsv2/btree.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>http://www.cs.msstate.edu/~cs2314/global/BTreeAnimation/algorithm.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="string_8h" kindref="compound">string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="assert_8h" kindref="compound">assert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="btree_8h" kindref="compound">btree.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ubixfsv2_2ubixfs_8h" kindref="compound">ubixfs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="12" refid="btree_8cpp_1621fb9a42299fe3892b62a43086d4caf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VERIFY(x,<sp/>y,<sp/>z,<sp/>n)<sp/>if<sp/>((x)<sp/>!=<sp/>(y))<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/>&quot;verify<sp/>&quot;<sp/>&lt;&lt;<sp/>z<sp/>&lt;&lt;<sp/>&quot;<sp/>failed&quot;<sp/>&lt;&lt;<sp/>endl;<sp/>PrintWholeTree();<sp/>}</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="classbTree_1fcb9ea137c7c244e4fc23b95c7e48d48" refkind="member"><highlight class="normal"><ref refid="classbTree_1f6969b750661bc6859f3a1a5b60cca90" kindref="member">bTree::bTree</ref>(<ref refid="classUbixFS" kindref="compound">UbixFS</ref><sp/>*<sp/>filesystem,<sp/><ref refid="structfileDescriptor" kindref="compound">fileDescriptor</ref><sp/>*<sp/>myfd)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><ref refid="include_2ubixos_2types_8h_17619b847aeded8a6d14cbfa212b2cdfb" kindref="member">size_t</ref><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref><sp/>=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><ref refid="classbTree_128b1926c127d65af730a534a3ca1a7a5" kindref="member">tag</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><ref refid="structfs" kindref="compound">fs</ref><sp/>=<sp/>filesystem;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><ref refid="classbTree_1adb550cc0b77f9f3ed14a5f679dbd954" kindref="member">fd</ref><sp/>=<sp/>myfd;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structbTreeHeader" kindref="compound">bTreeHeader</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(<ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="lib_2string_8h_1ce4b911463887af5e748326323e99a23" kindref="member">memset</ref>(<ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structbTreeHeader" kindref="compound">bTreeHeader</ref>));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(<ref refid="structfs" kindref="compound">fs</ref>);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/><ref refid="structfs" kindref="compound">fs</ref>-&gt;vfs_read(<ref refid="classbTree_1adb550cc0b77f9f3ed14a5f679dbd954" kindref="member">fd</ref>,<sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bTreeHeader));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(result<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bTreeHeader));</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>any<sp/>files<sp/>in<sp/>this<sp/>dir,<sp/>load<sp/>the<sp/>first<sp/>node<sp/>of<sp/>the<sp/>b+tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1a9518218d48b68f08aa2406268faf8da" kindref="member">treeLeafCount</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(<ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1fa2951c3806f5b1990da9f4f34d9fc10" kindref="member">firstNodeOffset</ref><sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structbNode" kindref="compound">bNode</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(<ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="structfs" kindref="compound">fs</ref>-&gt;vfs_read(<ref refid="classbTree_1adb550cc0b77f9f3ed14a5f679dbd954" kindref="member">fd</ref>,<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>,<sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1fa2951c3806f5b1990da9f4f34d9fc10" kindref="member">firstNodeOffset</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structbNode" kindref="compound">bNode</ref>));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(result<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bNode));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>if<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::bTree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="classbTree_1f6969b750661bc6859f3a1a5b60cca90" refkind="member"><highlight class="normal"><ref refid="classbTree_1f6969b750661bc6859f3a1a5b60cca90" kindref="member">bTree::bTree</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>key,<sp/><ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*<sp/>inode)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>once<sp/>the<sp/>FS<sp/>and<sp/>the<sp/>bTree<sp/>are<sp/>interfaced,<sp/>this<sp/>should<sp/>go<sp/>away<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref><sp/>=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><ref refid="classbTree_128b1926c127d65af730a534a3ca1a7a5" kindref="member">tag</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structbTreeHeader" kindref="compound">bTreeHeader</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(<ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="lib_2string_8h_1ce4b911463887af5e748326323e99a23" kindref="member">memset</ref>(<ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structbTreeHeader" kindref="compound">bTreeHeader</ref>));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1ca6e142166a274565291bc425b80549f" kindref="member">treeDepth</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1d072fd3a177d2aa12a2ff3ebf1ccbcb7" kindref="member">treeWidth</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1a9518218d48b68f08aa2406268faf8da" kindref="member">treeLeafCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_160d3496f588d01ff12f9e74288494f3b" kindref="member">firstDeleted</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1fa2951c3806f5b1990da9f4f34d9fc10" kindref="member">firstNodeOffset</ref><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bTreeHeader);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inode<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref><sp/>=<sp/><ref refid="classbTree_1ee13657d4417aaf2f772663fbbb3687c" kindref="member">allocEmptyNode</ref>();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref><sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;used<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;parent.bPtr<sp/>=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;leaf<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;childCount[1]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;---Creating<sp/>&quot;<sp/>&lt;&lt;<sp/>inode-&gt;name<sp/>&lt;&lt;<sp/>&quot;@&quot;<sp/>&lt;&lt;<sp/>inode<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="lib_2string_8h_12a6bedbfab350cd17b80849f5f9234e9" kindref="member">strncpy</ref>(<ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;keys[0],<sp/>key,<sp/><ref refid="btree_8h_14d914af1586d2b2c41b4427e9488decf" kindref="member">B_MAX_NAME_LENGTH</ref>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>pointer<sp/>to<sp/>data<sp/>page<sp/>to<sp/>the<sp/>right<sp/>of<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;head[1].iPtr<sp/>=<sp/>inode;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;tail[1].iPtr<sp/>=<sp/>inode;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;present[1]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inode<sp/>!=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>inode-&gt;next.bPtr<sp/>=<sp/>inode-&gt;prev.bPtr<sp/>=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree:bTree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="classbTree_1fbaa745c86c8bfaa77d2196a0c1eb85b" refkind="member"><highlight class="normal"><ref refid="classbTree_1fbaa745c86c8bfaa77d2196a0c1eb85b" kindref="member">bTree::Insert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>key,<sp/><ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*<sp/>inode)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="structbNode" kindref="compound">bNode</ref><sp/>*<sp/>bnode<sp/>=<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*<sp/>tmpInode<sp/>=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>curSlot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inode<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>note:<sp/>this<sp/>code<sp/>is<sp/>right<sp/>out<sp/>of<sp/>the<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref><sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref><sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structbTreeHeader" kindref="compound">bTreeHeader</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(<ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2string_8h_1ce4b911463887af5e748326323e99a23" kindref="member">memset</ref>(<ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structbTreeHeader" kindref="compound">bTreeHeader</ref>));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1ca6e142166a274565291bc425b80549f" kindref="member">treeDepth</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1d072fd3a177d2aa12a2ff3ebf1ccbcb7" kindref="member">treeWidth</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1a9518218d48b68f08aa2406268faf8da" kindref="member">treeLeafCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_160d3496f588d01ff12f9e74288494f3b" kindref="member">firstDeleted</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1fa2951c3806f5b1990da9f4f34d9fc10" kindref="member">firstNodeOffset</ref><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bTreeHeader);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref><sp/>=<sp/><ref refid="classbTree_1ee13657d4417aaf2f772663fbbb3687c" kindref="member">allocEmptyNode</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(<ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref><sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;used<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;parent.bPtr<sp/>=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;leaf<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;childCount[1]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2string_8h_12a6bedbfab350cd17b80849f5f9234e9" kindref="member">strncpy</ref>(<ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;keys[0],<sp/>key,<sp/><ref refid="btree_8h_14d914af1586d2b2c41b4427e9488decf" kindref="member">B_MAX_NAME_LENGTH</ref>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>pointer<sp/>to<sp/>data<sp/>page<sp/>to<sp/>the<sp/>right<sp/>of<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;head[1].iPtr<sp/>=<sp/>inode;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;tail[1].iPtr<sp/>=<sp/>inode;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;present[1]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>inode-&gt;next.iPtr<sp/>=<sp/>inode-&gt;prev.iPtr<sp/>=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>tmpInode<sp/>=<sp/><ref refid="classbTree_13e852a247447d5611a7e5cd7de53ecf9" kindref="member">Find</ref>(key);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpInode<sp/>!=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>PrintWholeTree();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;Insert(&quot;<sp/>&lt;&lt;<sp/>key<sp/>&lt;&lt;<sp/>&quot;)&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//Info(bnode);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>++<ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1a9518218d48b68f08aa2406268faf8da" kindref="member">treeLeafCount</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Find<sp/>the<sp/>leaf<sp/>node<sp/>the<sp/>inode<sp/>goes<sp/>into</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(bnode-&gt;used);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;---Inserting<sp/>&quot;<sp/>&lt;&lt;<sp/>inode-&gt;name<sp/>&lt;&lt;<sp/>&quot;<sp/>@<sp/>&quot;<sp/>&lt;&lt;<sp/>inode<sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bnode<sp/>!=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>!bnode-&gt;leaf)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(key,<sp/>bnode-&gt;keys[0])<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bnode<sp/>=<sp/>bnode-&gt;head[0].bPtr;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(key,<sp/>bnode-&gt;keys[bnode-&gt;used-1])<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bnode<sp/>=<sp/>bnode-&gt;head[bnode-&gt;used].bPtr;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>bnode-&gt;used;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(key,<sp/>bnode-&gt;keys[i])<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bnode<sp/>=<sp/>bnode-&gt;head[i].bPtr;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(bnode);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnode-&gt;leaf<sp/>!=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;leafnode!=true&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(inode);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(key,<sp/>bnode-&gt;keys[curSlot<sp/>=<sp/>0])<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpInode<sp/>=<sp/>bnode-&gt;head[curSlot].iPtr;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(key,<sp/>bnode-&gt;keys[(curSlot<sp/>=<sp/>bnode-&gt;used)-1])<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmpInode<sp/>=<sp/>bnode-&gt;head[bnode-&gt;used].iPtr;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(curSlot<sp/>=<sp/>1;<sp/>curSlot<sp/>&lt;<sp/>bnode-&gt;used;<sp/>curSlot++)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(key,<sp/>bnode-&gt;keys[curSlot])<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpInode<sp/>=<sp/>bnode-&gt;head[curSlot].iPtr;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>curSlot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmpInode<sp/>=<sp/>bnode-&gt;head[curSlot].iPtr;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpInode<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>is<sp/>the<sp/>first<sp/>node<sp/>in<sp/>this<sp/>leaf</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>bnode-&gt;head[curSlot].iPtr<sp/>=<sp/>bnode-&gt;tail[curSlot].iPtr<sp/>=<sp/>inode;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>bnode-&gt;present[curSlot]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(curSlot<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnode-&gt;head[1].iPtr<sp/>!=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*<sp/>iptr<sp/>=<sp/>bnode-&gt;head[1].iPtr;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inode-&gt;prev.iPtr<sp/>=<sp/>iptr-&gt;prev.iPtr;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inode-&gt;next.iPtr<sp/>=<sp/>iptr;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iptr-&gt;prev.iPtr<sp/>=<sp/>inode;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(inode-&gt;prev.iPtr<sp/>!=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inode-&gt;prev.iPtr-&gt;next.iPtr<sp/>=<sp/>inode;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inode-&gt;next.iPtr<sp/>=<sp/>inode-&gt;prev.iPtr<sp/>=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++bnode-&gt;used;<sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Add<sp/>node<sp/>to<sp/>leaf<sp/>page.<sp/>Scan<sp/>through<sp/>to<sp/>find<sp/>where<sp/>it<sp/>goes.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(key,<sp/>bnode-&gt;head[curSlot].iPtr-&gt;name)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inode-&gt;next.iPtr<sp/>=<sp/>bnode-&gt;head[curSlot].iPtr;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inode-&gt;prev.iPtr<sp/>=<sp/>inode-&gt;next.iPtr-&gt;prev.iPtr;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inode-&gt;next.iPtr-&gt;prev.iPtr<sp/>=<sp/>inode;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(inode-&gt;prev.iPtr<sp/>!=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>inode-&gt;prev.iPtr-&gt;next.iPtr<sp/>=<sp/>inode;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bnode-&gt;head[curSlot].iPtr<sp/>=<sp/>inode;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(key,<sp/>bnode-&gt;tail[curSlot].iPtr-&gt;name)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inode-&gt;prev.iPtr<sp/>=<sp/>bnode-&gt;tail[curSlot].iPtr;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inode-&gt;next.iPtr<sp/>=<sp/>inode-&gt;prev.iPtr-&gt;next.iPtr;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inode-&gt;prev.iPtr-&gt;next.iPtr<sp/>=<sp/>inode;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(inode-&gt;next.iPtr<sp/>!=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>inode-&gt;next.iPtr-&gt;prev.iPtr<sp/>=<sp/>inode;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bnode-&gt;tail[curSlot].iPtr<sp/>=<sp/>inode;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*<sp/>tmpInode<sp/>=<sp/>bnode-&gt;head[curSlot].iPtr;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bnode-&gt;childCount[curSlot];<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(key,<sp/>tmpInode-&gt;name)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inode-&gt;next.iPtr<sp/>=<sp/>tmpInode;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inode-&gt;prev.iPtr<sp/>=<sp/>tmpInode-&gt;prev.iPtr;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inode-&gt;next.iPtr-&gt;prev.iPtr<sp/>=<sp/>inode;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inode-&gt;prev.iPtr-&gt;next.iPtr<sp/>=<sp/>inode;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpInode<sp/>=<sp/>tmpInode-&gt;next.iPtr;<sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++bnode-&gt;childCount[curSlot]<sp/>==<sp/><ref refid="btree_8h_16612d45a89119eb036b8f2f28c99205c" kindref="member">B_MAX_CHILD_COUNT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;----<sp/>before<sp/>split<sp/>----&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Info(bnode);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(curSlot<sp/>!=<sp/>bnode-&gt;used)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>bnode-&gt;used<sp/>-<sp/>curSlot<sp/>+1;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memmove(&amp;bnode-&gt;head[curSlot+1],</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;bnode-&gt;head[curSlot],</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bnode-&gt;head[0])<sp/>*<sp/>shift);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memmove(&amp;bnode-&gt;tail[curSlot+1],</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;bnode-&gt;tail[curSlot],</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bnode-&gt;tail[0])<sp/>*<sp/>shift);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memmove(&amp;bnode-&gt;present[curSlot+1],</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;bnode-&gt;present[curSlot],</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bnode-&gt;present[0])<sp/>*<sp/>shift);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memmove(&amp;bnode-&gt;childCount[curSlot+1],</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;bnode-&gt;childCount[curSlot],</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bnode-&gt;childCount[0])<sp/>*<sp/>shift);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memmove(&amp;bnode-&gt;keys[curSlot+1],</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;bnode-&gt;keys[curSlot],</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bnode-&gt;keys[0])<sp/>*<sp/>(shift-1));</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_2string_8h_1ce4b911463887af5e748326323e99a23" kindref="member">memset</ref>(bnode-&gt;keys[curSlot],<sp/>0,<sp/><ref refid="btree_8h_14d914af1586d2b2c41b4427e9488decf" kindref="member">B_MAX_NAME_LENGTH</ref>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bnode-&gt;head[curSlot+1]<sp/>=<sp/>bnode-&gt;head[curSlot];</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bnode-&gt;tail[curSlot+1]<sp/>=<sp/>bnode-&gt;tail[curSlot];</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bnode-&gt;childCount[curSlot+1]<sp/>=<sp/>bnode-&gt;childCount[curSlot];</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bnode-&gt;present[curSlot+1]<sp/>=<sp/>bnode-&gt;present[curSlot];</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*<sp/>tmpInode<sp/>=<sp/>bnode-&gt;head[curSlot].iPtr;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(B_MAX_CHILD_COUNT+1)<sp/>&gt;&gt;<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(tmpInode);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmpInode<sp/>=<sp/>tmpInode-&gt;next.iPtr;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2string_8h_12a6bedbfab350cd17b80849f5f9234e9" kindref="member">strncpy</ref>(bnode-&gt;keys[curSlot],<sp/>tmpInode-&gt;name,<sp/><ref refid="btree_8h_14d914af1586d2b2c41b4427e9488decf" kindref="member">B_MAX_NAME_LENGTH</ref>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>bnode-&gt;head[curSlot+1].iPtr<sp/>=<sp/>tmpInode;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>bnode-&gt;tail[curSlot].iPtr<sp/>=<sp/>tmpInode-&gt;prev.iPtr;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>bnode-&gt;childCount[curSlot]<sp/>=<sp/>(<ref refid="btree_8h_16612d45a89119eb036b8f2f28c99205c" kindref="member">B_MAX_CHILD_COUNT</ref>+1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>bnode-&gt;childCount[curSlot+1]<sp/>-=<sp/>bnode-&gt;childCount[curSlot];</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>bnode-&gt;present[curSlot]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>++header-&gt;treeWidth;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++bnode-&gt;used<sp/>==<sp/><ref refid="btree_8h_1d0a8c9702b88c517fad6d76b2f2e837c" kindref="member">B_MAX_KEYS</ref>)<sp/>splitNode(bnode);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>if<sp/>leaf<sp/>is<sp/>full</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Info(bnode);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::Insert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="288" refid="classbTree_151f94e9190f4c21c66367932b22c10aa" refkind="member"><highlight class="normal"><ref refid="classbTree_151f94e9190f4c21c66367932b22c10aa" kindref="member">bTree::splitNode</ref>(<ref refid="structbNode" kindref="compound">bNode</ref><sp/>*<sp/>oldNode)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*<sp/>tmpInode<sp/>=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(oldNode);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldNode<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldNode-&gt;used<sp/>!=<sp/><ref refid="btree_8h_1d0a8c9702b88c517fad6d76b2f2e837c" kindref="member">B_MAX_KEYS</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><ref refid="structbNode" kindref="compound">bNode</ref><sp/>*<sp/>newNode<sp/>=<sp/><ref refid="classbTree_1ee13657d4417aaf2f772663fbbb3687c" kindref="member">allocEmptyNode</ref>();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newNode<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/><ref refid="btree_8h_1d0a8c9702b88c517fad6d76b2f2e837c" kindref="member">B_MAX_KEYS</ref><sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>splitLoc<sp/>=<sp/><ref refid="btree_8h_1d0a8c9702b88c517fad6d76b2f2e837c" kindref="member">B_MAX_KEYS</ref><sp/>-<sp/>shift;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>++<sp/>shift;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;oldNode<sp/>before<sp/>split:<sp/>&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Info(oldNode);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;splitLoc:<sp/>&quot;<sp/>&lt;&lt;<sp/>splitLoc<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;shift:<sp/>&quot;<sp/>&lt;&lt;<sp/>shift<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>newNode-&gt;used<sp/>=<sp/>oldNode-&gt;used<sp/>=<sp/><ref refid="btree_8h_1d0a8c9702b88c517fad6d76b2f2e837c" kindref="member">B_MAX_KEYS</ref><sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>newNode-&gt;parent.bPtr<sp/>=<sp/>oldNode-&gt;parent.bPtr;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>newNode-&gt;leaf<sp/>=<sp/>oldNode-&gt;leaf;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;newNode-&gt;used:<sp/>&quot;<sp/>&lt;&lt;<sp/>newNode-&gt;used<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;oldNode-&gt;used:<sp/>&quot;<sp/>&lt;&lt;<sp/>oldNode-&gt;used<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><ref refid="lib_2string_8h_1e33b18edb618c656b9b795b9fce2316c" kindref="member">memcpy</ref>(&amp;newNode-&gt;keys[0],</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;oldNode-&gt;keys[splitLoc],</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(newNode-&gt;keys[0])<sp/>*<sp/>(shift-1));</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><ref refid="lib_2string_8h_1ce4b911463887af5e748326323e99a23" kindref="member">memset</ref>(&amp;oldNode-&gt;keys[splitLoc],<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(newNode-&gt;keys[0])<sp/>*<sp/>(shift-1));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><ref refid="lib_2string_8h_1e33b18edb618c656b9b795b9fce2316c" kindref="member">memcpy</ref>(&amp;newNode-&gt;present[0],</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;oldNode-&gt;present[splitLoc],</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(newNode-&gt;present[0])<sp/>*<sp/>shift);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><ref refid="lib_2string_8h_1ce4b911463887af5e748326323e99a23" kindref="member">memset</ref>(&amp;oldNode-&gt;present[splitLoc],<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(newNode-&gt;present[0])<sp/>*<sp/>shift);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><ref refid="lib_2string_8h_1e33b18edb618c656b9b795b9fce2316c" kindref="member">memcpy</ref>(&amp;newNode-&gt;head[0],</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;oldNode-&gt;head[splitLoc],</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(newNode-&gt;head[0])<sp/>*<sp/>shift);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><ref refid="lib_2string_8h_1ce4b911463887af5e748326323e99a23" kindref="member">memset</ref>(&amp;oldNode-&gt;head[splitLoc],<sp/>0,<sp/></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(newNode-&gt;head[0])<sp/>*<sp/>shift);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><ref refid="lib_2string_8h_1e33b18edb618c656b9b795b9fce2316c" kindref="member">memcpy</ref>(&amp;newNode-&gt;tail[0],</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;oldNode-&gt;tail[splitLoc],</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(newNode-&gt;tail[0])<sp/>*<sp/>shift);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><ref refid="lib_2string_8h_1ce4b911463887af5e748326323e99a23" kindref="member">memset</ref>(&amp;oldNode-&gt;tail[splitLoc],<sp/>0,<sp/></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(newNode-&gt;tail[0])<sp/>*<sp/>shift);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><ref refid="lib_2string_8h_1e33b18edb618c656b9b795b9fce2316c" kindref="member">memcpy</ref>(&amp;newNode-&gt;childCount[0],</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;oldNode-&gt;childCount[splitLoc],</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(newNode-&gt;childCount[0])<sp/>*<sp/>shift);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><ref refid="lib_2string_8h_1ce4b911463887af5e748326323e99a23" kindref="member">memset</ref>(&amp;oldNode-&gt;childCount[splitLoc],<sp/>0,<sp/></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(newNode-&gt;childCount[0])<sp/>*<sp/>shift);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!newNode-&gt;leaf)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>newNode-&gt;used;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newNode-&gt;head[i].bPtr-&gt;parent.bPtr<sp/>=<sp/>newNode;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>if<sp/>newNode<sp/>isn&apos;t<sp/>a<sp/>leaf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>tmpInode<sp/>=<sp/><ref refid="classbTree_18d04e7d1bb555d157f32673af0977244" kindref="member">GetFirstNode</ref>(newNode);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(tmpInode);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldNode<sp/>==<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>a<sp/>new<sp/>root<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1ca6e142166a274565291bc425b80549f" kindref="member">treeDepth</ref>;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref><sp/>=<sp/><ref refid="classbTree_1ee13657d4417aaf2f772663fbbb3687c" kindref="member">allocEmptyNode</ref>();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>oldNode-&gt;parent.bPtr<sp/>=<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>newNode-&gt;parent.bPtr<sp/>=<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>strncpy(root-&gt;keys[0],<sp/>newNode-&gt;keys[0],<sp/>B_MAX_NAME_LENGTH);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2string_8h_12a6bedbfab350cd17b80849f5f9234e9" kindref="member">strncpy</ref>(<ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;keys[0],<sp/>tmpInode-&gt;name,<sp/><ref refid="btree_8h_14d914af1586d2b2c41b4427e9488decf" kindref="member">B_MAX_NAME_LENGTH</ref>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;head[0].bPtr<sp/>=<sp/>oldNode;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;tail[0].bPtr<sp/>=<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;tail[1].bPtr<sp/>=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;head[1].bPtr<sp/>=<sp/>newNode;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;used<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;leaf<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;present[0]<sp/>=<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;present[1]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;childCount[0]<sp/>=<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;childCount[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>root-&gt;childCount[0]<sp/>=<sp/>oldNode-&gt;used;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>root-&gt;childCount[1]<sp/>=<sp/>newNode-&gt;used;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;parent&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Info(newNode-&gt;parent);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;oldNode&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Info(oldNode);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;-----&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;newNode&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Info(newNode);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;-----&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbTree_18f732470e0bc0b0a5a0810c944c51122" kindref="member">insertNode</ref>(newNode-&gt;parent.bPtr,<sp/>tmpInode-&gt;name,<sp/>newNode);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(oldNode-&gt;parent-&gt;used<sp/>==<sp/>B_MAX_KEYS)<sp/>splitNode(oldNode-&gt;parent);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::splitNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="classbTree_18f732470e0bc0b0a5a0810c944c51122" refkind="member"><highlight class="normal"><ref refid="classbTree_18f732470e0bc0b0a5a0810c944c51122" kindref="member">bTree::insertNode</ref>(<ref refid="structbNode" kindref="compound">bNode</ref><sp/>*<sp/>node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>key,<sp/><ref refid="structbNode" kindref="compound">bNode</ref><sp/>*<sp/>headPtr)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>curSlot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/>key<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(key,<sp/>node-&gt;keys[node-&gt;used-1])<sp/>&gt;=<sp/>0){</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>curSlot<sp/>=<sp/>node-&gt;used;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2string_8h_1ce4b911463887af5e748326323e99a23" kindref="member">memset</ref>(node-&gt;keys[curSlot],<sp/>0,<sp/><ref refid="btree_8h_14d914af1586d2b2c41b4427e9488decf" kindref="member">B_MAX_NAME_LENGTH</ref>);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2string_8h_12a6bedbfab350cd17b80849f5f9234e9" kindref="member">strncpy</ref>(node-&gt;keys[curSlot],<sp/>key,<sp/><ref refid="btree_8h_14d914af1586d2b2c41b4427e9488decf" kindref="member">B_MAX_NAME_LENGTH</ref>);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;head[curSlot+1].bPtr<sp/>=<sp/>headPtr;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;tail[curSlot+1].bPtr<sp/>=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;present[curSlot+1]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;childCount[node-&gt;used]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>maybe?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(curSlot<sp/>=<sp/>0;<sp/>curSlot<sp/>&lt;<sp/>node-&gt;used;<sp/>curSlot++)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(key,<sp/>node-&gt;keys[curSlot])<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>note<sp/>that<sp/>there<sp/>is<sp/>one<sp/>more<sp/>item<sp/>for<sp/>everything<sp/>but<sp/>keys</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>So,<sp/>make<sp/>the<sp/>shift<sp/>count<sp/>+1<sp/>and<sp/>just<sp/>subtract<sp/>it<sp/>from<sp/>the<sp/>key<sp/>shift</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>later</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>node-&gt;used<sp/>-<sp/>curSlot<sp/>+1;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(&amp;node-&gt;head[curSlot+1],</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;node-&gt;head[curSlot],</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(node-&gt;head[0])<sp/>*<sp/>shift);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(&amp;node-&gt;tail[curSlot+1],</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;node-&gt;tail[curSlot],</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(node-&gt;tail[0])<sp/>*<sp/>shift);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(&amp;node-&gt;present[curSlot+1],</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;node-&gt;present[curSlot],</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(node-&gt;present[0])<sp/>*<sp/>shift);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(&amp;node-&gt;childCount[curSlot+1],</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;node-&gt;childCount[curSlot],</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(node-&gt;childCount[0])<sp/>*<sp/>shift);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(&amp;node-&gt;keys[curSlot+1],</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;node-&gt;keys[curSlot],</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(node-&gt;keys[0])<sp/>*<sp/>(shift-1));</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2string_8h_1ce4b911463887af5e748326323e99a23" kindref="member">memset</ref>(node-&gt;keys[curSlot],<sp/>0,<sp/><ref refid="btree_8h_14d914af1586d2b2c41b4427e9488decf" kindref="member">B_MAX_NAME_LENGTH</ref>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2string_8h_12a6bedbfab350cd17b80849f5f9234e9" kindref="member">strncpy</ref>(node-&gt;keys[curSlot],<sp/>key,<sp/><ref refid="btree_8h_14d914af1586d2b2c41b4427e9488decf" kindref="member">B_MAX_NAME_LENGTH</ref>);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;head[curSlot+1].bPtr<sp/>=<sp/>headPtr;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;tail[curSlot+1].bPtr<sp/>=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;present[curSlot+1]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>node-&gt;childCount[node-&gt;used]<sp/>=<sp/>?;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>else<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++node-&gt;used<sp/>==<sp/><ref refid="btree_8h_1d0a8c9702b88c517fad6d76b2f2e837c" kindref="member">B_MAX_KEYS</ref>)<sp/><ref refid="classbTree_151f94e9190f4c21c66367932b22c10aa" kindref="member">splitNode</ref>(node);<sp/></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::insertNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><ref refid="structbNode" kindref="compound">bNode</ref><sp/>*</highlight></codeline>
<codeline lineno="444" refid="classbTree_1ee13657d4417aaf2f772663fbbb3687c" refkind="member"><highlight class="normal"><ref refid="classbTree_1ee13657d4417aaf2f772663fbbb3687c" kindref="member">bTree::allocEmptyNode</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><ref refid="structbNode" kindref="compound">bNode</ref><sp/>*<sp/>newNode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structbNode" kindref="compound">bNode</ref>;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><ref refid="lib_2string_8h_1ce4b911463887af5e748326323e99a23" kindref="member">memset</ref>(newNode,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structbNode" kindref="compound">bNode</ref>));</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>newNode-&gt;magic1<sp/>=<sp/><ref refid="btree_8h_16068ceea0c729502fc2c30fb5fe68e75" kindref="member">B_NODE_MAGIC_1</ref>;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>newNode-&gt;magic2<sp/>=<sp/><ref refid="btree_8h_16d1cceff07f71b93f2b82935353e3846" kindref="member">B_NODE_MAGIC_2</ref>;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>newNode-&gt;parent.bPtr<sp/>=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>newNode-&gt;tag<sp/>=<sp/>++<ref refid="classbTree_128b1926c127d65af730a534a3ca1a7a5" kindref="member">tag</ref>;<sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>start<sp/>at<sp/>1<sp/>(0<sp/>is<sp/>the<sp/>header<sp/>node)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newNode;</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::allocEmptyNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456" refid="classbTree_1336aef73ec18ab2abdf76e451f01b983" refkind="member"><highlight class="normal"><ref refid="classbTree_1e095e3365ec7b4656efcf0889ff43a6c" kindref="member">bTree::Info</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbNode" kindref="compound">bNode</ref><sp/>*<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*<sp/>inode<sp/>=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref><sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/><sp/>node<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>|<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node-&gt;parent.bPtr<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>node-&gt;used;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>inode<sp/>=<sp/>node-&gt;head[i].iPtr;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;(&quot;<sp/>&lt;&lt;<sp/>node-&gt;childCount[i]<sp/>&lt;&lt;<sp/>&quot;)&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>node-&gt;childCount[i];<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>inode-&gt;name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inode<sp/>=<sp/>inode-&gt;next.iPtr;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>k</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>node-&gt;used)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node-&gt;keys[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="472"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>node-&gt;used;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;keys[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node-&gt;keys[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;node-&gt;used:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node-&gt;used<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;leaf:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node-&gt;leaf<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>node-&gt;used;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>inode<sp/>=<sp/>(<ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*)node-&gt;head[i];</highlight></codeline>
<codeline lineno="480"><highlight class="normal">cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;node-&gt;childCount[&quot;</highlight><highlight class="normal">&lt;&lt;i&lt;&lt;</highlight><highlight class="stringliteral">&quot;]:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node-&gt;childCount[i]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>node-&gt;childCount[i];<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(inode);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;].[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]-&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>inode-&gt;name<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inode<sp/>=<sp/>inode-&gt;next;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="488"><highlight class="preprocessor"></highlight><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::Info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491" refid="classbTree_1e095e3365ec7b4656efcf0889ff43a6c" refkind="member"><highlight class="normal"><ref refid="classbTree_1e095e3365ec7b4656efcf0889ff43a6c" kindref="member">bTree::Info</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*<sp/>inode<sp/>=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tree<sp/>depth:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1ca6e142166a274565291bc425b80549f" kindref="member">treeDepth</ref><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tree<sp/>width:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1d072fd3a177d2aa12a2ff3ebf1ccbcb7" kindref="member">treeWidth</ref><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tree<sp/>leaf<sp/>count:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1a9518218d48b68f08aa2406268faf8da" kindref="member">treeLeafCount</ref><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tag:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classbTree_128b1926c127d65af730a534a3ca1a7a5" kindref="member">tag</ref><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref><sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;used;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CC[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;childCount[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;used;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CH[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;head[i].bPtr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;used;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CT[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;tail[i].bPtr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;used;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;keys[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;keys[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal">cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;root-&gt;used:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;used<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;used;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inode<sp/>=<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;head[i].iPtr;</highlight></codeline>
<codeline lineno="523"><highlight class="normal">cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;root-&gt;childCount[&quot;</highlight><highlight class="normal">&lt;&lt;i&lt;&lt;</highlight><highlight class="stringliteral">&quot;]:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;childCount[i]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(<ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;leaf)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal">cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;root<sp/>contains<sp/>leaf<sp/>node&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>-&gt;childCount[i];<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(inode);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;].[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]-&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>inode-&gt;name<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inode<sp/>=<sp/>inode-&gt;next.iPtr;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>if<sp/>root-&gt;leaf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::Info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536" refid="classbTree_11c516c3e73c273ded54df841e8271954" refkind="member"><highlight class="normal"><ref refid="classbTree_11c516c3e73c273ded54df841e8271954" kindref="member">bTree::Print</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*<sp/>node<sp/>=<sp/><ref refid="classbTree_18d04e7d1bb555d157f32673af0977244" kindref="member">GetFirstNode</ref>();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>node-&gt;name<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;next.iPtr;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::Print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*</highlight></codeline>
<codeline lineno="545" refid="classbTree_13e852a247447d5611a7e5cd7de53ecf9" refkind="member"><highlight class="normal"><ref refid="classbTree_13e852a247447d5611a7e5cd7de53ecf9" kindref="member">bTree::Find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/><sp/>ubixfsInode<sp/>*<sp/>tmp<sp/>=<sp/>GetFirstNode();</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/><sp/>while<sp/>(tmp!=NULL)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(strcmp(tmp-&gt;name,<sp/>key)<sp/>==<sp/>0)<sp/>return<sp/>tmp;</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>tmp-&gt;next.iPtr;</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline lineno="553"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbTree_1dddfb323e06a20e5f57896ad6de6430c" kindref="member">treeSearch</ref>(<ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>,<sp/>key);</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::Find</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*</highlight></codeline>
<codeline lineno="558" refid="classbTree_1033edc7c078c7c90f59610ca8946cebe" refkind="member"><highlight class="normal"><ref refid="classbTree_1033edc7c078c7c90f59610ca8946cebe" kindref="member">bTree::inodeSearch</ref>(<ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*<sp/>inode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inode<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/>key<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(inode-&gt;name,<sp/>key);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inode;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>inode<sp/>=<sp/>inode-&gt;next.iPtr;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(inode<sp/>!=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>((result<sp/>=<sp/><ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(inode-&gt;name,<sp/>key))<sp/>&lt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inode<sp/>=<sp/>inode-&gt;next.iPtr;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>inode<sp/>=<sp/>inode-&gt;prev.iPtr;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(inode<sp/>!=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>((result<sp/>=<sp/><ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(inode-&gt;name,<sp/>key))<sp/>&gt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inode<sp/>=<sp/>inode-&gt;prev.iPtr;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>0<sp/>?<sp/>inode<sp/>:<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::inodeSearch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*</highlight></codeline>
<codeline lineno="578" refid="classbTree_1dddfb323e06a20e5f57896ad6de6430c" refkind="member"><highlight class="normal"><ref refid="classbTree_1dddfb323e06a20e5f57896ad6de6430c" kindref="member">bTree::treeSearch</ref>(<ref refid="structbNode" kindref="compound">bNode</ref><sp/>*<sp/>bnode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnode<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/>key<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/>bnode-&gt;used<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnode-&gt;leaf)<sp/></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbTree_1033edc7c078c7c90f59610ca8946cebe" kindref="member">inodeSearch</ref>(<ref refid="classbTree_18d04e7d1bb555d157f32673af0977244" kindref="member">GetFirstNode</ref>(bnode),<sp/>key);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(key,<sp/>bnode-&gt;keys[0])<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbTree_1dddfb323e06a20e5f57896ad6de6430c" kindref="member">treeSearch</ref>(bnode-&gt;head[0].bPtr,<sp/>key);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(key,<sp/>bnode-&gt;keys[bnode-&gt;used-1])<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbTree_1dddfb323e06a20e5f57896ad6de6430c" kindref="member">treeSearch</ref>(bnode-&gt;head[bnode-&gt;used].bPtr,<sp/>key);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>bnode-&gt;used;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(key,<sp/>bnode-&gt;keys[i])<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbTree_1dddfb323e06a20e5f57896ad6de6430c" kindref="member">treeSearch</ref>(bnode-&gt;head[i].bPtr,<sp/>key);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::treeSearch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*<sp/></highlight></codeline>
<codeline lineno="603" refid="classbTree_18d04e7d1bb555d157f32673af0977244" refkind="member"><highlight class="normal"><ref refid="classbTree_18d04e7d1bb555d157f32673af0977244" kindref="member">bTree::GetFirstNode</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbTree_18d04e7d1bb555d157f32673af0977244" kindref="member">GetFirstNode</ref>(<ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>);</highlight></codeline>
<codeline lineno="605"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::GetFirstNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*</highlight></codeline>
<codeline lineno="608" refid="classbTree_16150d5508019569eab05f007285437aa" refkind="member"><highlight class="normal"><ref refid="classbTree_18d04e7d1bb555d157f32673af0977244" kindref="member">bTree::GetFirstNode</ref>(<ref refid="structbNode" kindref="compound">bNode</ref><sp/>*<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><ref refid="structbNode" kindref="compound">bNode</ref><sp/>*<sp/>tmpNode<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpNode<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!tmpNode-&gt;leaf)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tmpNode-&gt;used;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpNode-&gt;head[i].bPtr<sp/>!=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpNode<sp/>=<sp/>tmpNode-&gt;head[i].bPtr;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tmpNode-&gt;used;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpNode-&gt;head[i].iPtr<sp/>!=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmpNode-&gt;head[i].iPtr;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::GetFirstNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><ref refid="structbNode" kindref="compound">bNode</ref><sp/>*</highlight></codeline>
<codeline lineno="629" refid="classbTree_1757a2be70e2309d4bf0be2eff562a8b9" refkind="member"><highlight class="normal"><ref refid="classbTree_1757a2be70e2309d4bf0be2eff562a8b9" kindref="member">bTree::findLeafNode</ref>(<ref refid="structbNode" kindref="compound">bNode</ref><sp/>*<sp/>node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(node);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(key);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/>key<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(node-&gt;used);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;leaf)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(key,<sp/>node-&gt;keys[0])<sp/>&lt;<sp/>0)<sp/></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbTree_1757a2be70e2309d4bf0be2eff562a8b9" kindref="member">findLeafNode</ref>(node-&gt;head[0].bPtr,<sp/>key);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(key,<sp/>node-&gt;keys[node-&gt;used-1])<sp/>&gt;=<sp/>0)<sp/></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbTree_1757a2be70e2309d4bf0be2eff562a8b9" kindref="member">findLeafNode</ref>(node-&gt;head[node-&gt;used].bPtr,<sp/>key);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>node-&gt;used;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(key,<sp/>node-&gt;keys[i])<sp/>&lt;<sp/>0)<sp/></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbTree_1757a2be70e2309d4bf0be2eff562a8b9" kindref="member">findLeafNode</ref>(node-&gt;head[i].bPtr,<sp/>key);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="648"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::findLeafNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651" refid="classbTree_19fec062b5b9f54ab6147cba2e92763c2" refkind="member"><highlight class="normal"><ref refid="classbTree_19fec062b5b9f54ab6147cba2e92763c2" kindref="member">bTree::saveNode</ref>(FILE<sp/>*<sp/>fd,<sp/><ref refid="structbNode" kindref="compound">bNode</ref><sp/>*<sp/>node,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>tmpPtr)<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><ref refid="structbNode" kindref="compound">bNode</ref><sp/>*<sp/>ptr<sp/>=<sp/>(<ref refid="structbNode" kindref="compound">bNode</ref><sp/>*)tmpPtr;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(tmpPtr);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(fd);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(node);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;writing<sp/>tag:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node-&gt;tag<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><ref refid="lib_2string_8h_1e33b18edb618c656b9b795b9fce2316c" kindref="member">memcpy</ref>(tmpPtr,<sp/>node,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structbNode" kindref="compound">bNode</ref>));<sp/><sp/></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;parent.bPtr<sp/>!=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;parent.offset<sp/>=<sp/>node-&gt;parent.bPtr-&gt;tag<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bNode);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;parent.offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>node-&gt;used;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>bNode<sp/>*<sp/>bPtr<sp/>=<sp/>node-&gt;head[i].bPtr;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(bPtr<sp/>!=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;head[i].offset<sp/>=<sp/>bPtr-&gt;tag<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bNode);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;head[i].offset<sp/>=<sp/>~0;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;present[i]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;leaf)<sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>node-&gt;used;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>ubixfsInode<sp/>*<sp/>inode<sp/>=<sp/>node-&gt;head[i].iPtr;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mji<sp/><sp/><sp/><sp/>if<sp/>(inode<sp/>!=<sp/>NULL)<sp/>tmp-&gt;head[i]<sp/>=<sp/>inode-&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>node-&gt;used;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;head[i].bPtr<sp/>!=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/><ref refid="classbTree_19fec062b5b9f54ab6147cba2e92763c2" kindref="member">saveNode</ref>(fd,<sp/>node-&gt;head[i].bPtr,<sp/>tmpPtr);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="693"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::saveNode<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="696" refid="classbTree_158a7211e172868c67ee7ed12e8015c4f" refkind="member"><highlight class="normal"><ref refid="classbTree_158a7211e172868c67ee7ed12e8015c4f" kindref="member">bTree::Save</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>filename)<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*<sp/><ref refid="unionuPtr" kindref="compound">uPtr</ref><sp/>=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filename<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>FILE<sp/>*<sp/>fd<sp/>=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fd<sp/>=<sp/><ref refid="include_2vfs_2file_8h_1d6a41ac88a7d46d574e8a675fdde136c" kindref="member">fopen</ref>(filename,<sp/></highlight><highlight class="stringliteral">&quot;wb+&quot;</highlight><highlight class="normal">))<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal">cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tags:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classbTree_128b1926c127d65af730a534a3ca1a7a5" kindref="member">tag</ref><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>lseek(fileno(fd),<sp/><ref refid="classbTree_128b1926c127d65af730a534a3ca1a7a5" kindref="member">tag</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bNode),<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1fa2951c3806f5b1990da9f4f34d9fc10" kindref="member">firstNodeOffset</ref><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bNode);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_160d3496f588d01ff12f9e74288494f3b" kindref="member">firstDeleted</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>tmpPtr<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bNode));</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><ref refid="assert_8h_1d6d5aaa966ca7424f7cb9bd01f2c838b" kindref="member">assert</ref>(tmpPtr);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>uPtr<sp/>=<sp/>(<ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*)tmpPtr;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><ref refid="lib_2string_8h_1ce4b911463887af5e748326323e99a23" kindref="member">memset</ref>(tmpPtr,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bNode));</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><ref refid="include_2vfs_2file_8h_1ca6c1e5b57dc9f5d8551b41ea98bfbb7" kindref="member">fwrite</ref>(<ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structbTreeHeader" kindref="compound">bTreeHeader</ref>),<sp/>1,<sp/>fd);<sp/></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><ref refid="classbTree_19fec062b5b9f54ab6147cba2e92763c2" kindref="member">saveNode</ref>(fd,<sp/><ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>,<sp/>tmpPtr);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><ref refid="include_2vfs_2file_8h_1872c22366b4c63f4bdb10cd3b7980b11" kindref="member">fclose</ref>(fd);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>free(tmpPtr);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="717"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::Save</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720" refid="classbTree_180f234b61d3d99a44dba29f0754607dc" refkind="member"><highlight class="normal"><ref refid="classbTree_180f234b61d3d99a44dba29f0754607dc" kindref="member">bTree::Load</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>filename)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filename<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="723"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::Load</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726" refid="classbTree_1ca63b57c49aed1565117d6de1d47036e" refkind="member"><highlight class="normal"><ref refid="classbTree_1ca63b57c49aed1565117d6de1d47036e" kindref="member">bTree::Delete</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="730"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::Delete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733" refid="classbTree_173a18a32abfb03fc233f35a237ad094f" refkind="member"><highlight class="normal"><ref refid="classbTree_173a18a32abfb03fc233f35a237ad094f" kindref="member">bTree::Verify</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*<sp/>node<sp/>=<sp/><ref refid="classbTree_18d04e7d1bb555d157f32673af0977244" kindref="member">GetFirstNode</ref>();</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structubixfsInode" kindref="compound">ubixfsInode</ref><sp/>*<sp/><ref refid="structfileSystem_1a53ac2dce5c23d729ca2e49907a542de" kindref="member">next</ref><sp/>=<sp/>node-&gt;next.iPtr;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structfileSystem_1a53ac2dce5c23d729ca2e49907a542de" kindref="member">next</ref><sp/>!=<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>node-&gt;name<sp/>&lt;&lt;<sp/>&quot;::&quot;<sp/>&lt;&lt;<sp/>node-&gt;next-&gt;name<sp/>&lt;&lt;<sp/>&quot;:::&quot;<sp/>&lt;&lt;<sp/>strcmp(node-&gt;name,<sp/>node-&gt;next-&gt;name)<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2string_8h_16f3dcb20ff11ff9db5904c3cfb61a38c" kindref="member">strcmp</ref>(node-&gt;name,<sp/><ref refid="structfileSystem_1a53ac2dce5c23d729ca2e49907a542de" kindref="member">next</ref>-&gt;name)<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/><ref refid="structfileSystem_1a53ac2dce5c23d729ca2e49907a542de" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="746"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::Verify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="749" refid="classbTree_1af1aa66ce8e4d6b6ae3a50b66bc4b3e5" refkind="member"><highlight class="normal"><ref refid="classbTree_11c516c3e73c273ded54df841e8271954" kindref="member">bTree::Print</ref>(bNode<sp/>*<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/><ref refid="def_8h_1070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><ref refid="classbTree_1e095e3365ec7b4656efcf0889ff43a6c" kindref="member">Info</ref>(node);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node-&gt;leaf)</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>node-&gt;used;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbTree_11c516c3e73c273ded54df841e8271954" kindref="member">Print</ref>(node-&gt;head[i].bPtr);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::Print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759" refid="classbTree_1167dc542695e9e90d741dedb07a8fee4" refkind="member"><highlight class="normal"><ref refid="classbTree_1167dc542695e9e90d741dedb07a8fee4" kindref="member">bTree::PrintWholeTree</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><ref refid="classbTree_11c516c3e73c273ded54df841e8271954" kindref="member">Print</ref>(<ref refid="classbTree_1136e55de9f7c2144aaa86729413bb0c6" kindref="member">root</ref>);</highlight></codeline>
<codeline lineno="761"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::PrintWholeTree;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763" refid="classbTree_12daef081948bc350347520ca9781cc1b" refkind="member"><highlight class="normal"><ref refid="classbTree_12daef081948bc350347520ca9781cc1b" kindref="member">bTree::~bTree</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tree<sp/>depth:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1ca6e142166a274565291bc425b80549f" kindref="member">treeDepth</ref><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tree<sp/>width:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1d072fd3a177d2aa12a2ff3ebf1ccbcb7" kindref="member">treeWidth</ref><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tree<sp/>leaf<sp/>count:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classbTree_18bef0f48cc7ace024ca327ce774185c8" kindref="member">header</ref>-&gt;<ref refid="structbTreeHeader_1a9518218d48b68f08aa2406268faf8da" kindref="member">treeLeafCount</ref><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>bTree::~bTree</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/usr/home/reddawg/source/ubix2/src/sys/ubixfsv2/btree.cpp"/>
  </compounddef>
</doxygen>
